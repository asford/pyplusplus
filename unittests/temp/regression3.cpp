// This file has been generated by pyplusplus.

// Copyright 2004 Roman Yakovenko.
// Distributed under the Boost Software License, Version 1.0. (See
// accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#include "boost/python.hpp"
#ifdef _MSC_VER
    #pragma hdrstop
#endif //_MSC_VER

#include "unittests/data/regression3_to_be_exported.hpp"

namespace bp = boost::python;

struct base_wrapper : regression_3::base, bp::wrapper< regression_3::base > {

    base_wrapper( )
    : regression_3::base( )
      , bp::wrapper< regression_3::base >()
    {}

    virtual int get_value(  ) const {
        bp::override get_value = this->get_override( "get_value" );
        return get_value(  );
    }

};

struct middle_wrapper : regression_3::middle, bp::wrapper< regression_3::middle > {

    middle_wrapper()
    : regression_3::middle()
      , bp::wrapper< regression_3::middle >()
    {}

    virtual void set_value( int arg0 ){
        bp::override set_value = this->get_override( "set_value" );
        set_value( arg0  );
    }

    virtual int get_value(  ) const {
        bp::override get_value = this->get_override( "get_value" );
        return get_value(  );
    }

};

struct final_wrapper : regression_3::final, bp::wrapper< regression_3::final > {

    final_wrapper()
    : regression_3::final()
      , bp::wrapper< regression_3::final >()
    {}

    virtual int get_value(  ) const {
        if( bp::override get_value = this->get_override( "get_value" ) )
            return get_value(  );
        else
            return regression_3::final::get_value(  );
    }
    
    virtual int default_get_value(  ) const {
        return this->regression_3::final::get_value( );
    }

    virtual void set_value( int v ){
        if( bp::override set_value = this->get_override( "set_value" ) )
            set_value( v  );
        else
            regression_3::final::set_value( v  );
    }
    
    virtual void default_set_value( int v ){
        this->regression_3::final::set_value( v );
    }

};

BOOST_PYTHON_MODULE(regression3){
    bp::class_< base_wrapper, boost::noncopyable >( "base" )    
        .def( bp::init< >()[bp::default_call_policies()] )    
        .def( "get_value"
                , bp::pure_virtual( &::regression_3::base::get_value )
                , bp::default_call_policies() );

    bp::class_< middle_wrapper, bp::bases< regression_3::base >, boost::noncopyable >( "middle" )    
        .def( "set_value"
                , bp::pure_virtual( &::regression_3::middle::set_value )
                , ( bp::arg("arg0") )
                , bp::default_call_policies() );

    bp::class_< final_wrapper, bp::bases< regression_3::middle >, boost::noncopyable >( "final" )    
        .def( "get_value"
                , &regression_3::final::get_value, &final_wrapper::default_get_value
                , bp::default_call_policies() )    
        .def( "set_value"
                , &regression_3::final::set_value, &final_wrapper::default_set_value
                , ( bp::arg("v") )
                , bp::default_call_policies() );

    bp::def( "set_value"
            , &regression_3::set_value
            , ( bp::arg("m"), bp::arg("value") )
            , bp::default_call_policies() );

    bp::def( "get_value"
            , &regression_3::get_value
            , ( bp::arg("b") )
            , bp::default_call_policies() );
}
