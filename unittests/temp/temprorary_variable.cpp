// This file has been generated by pyplusplus.

// Copyright 2004 Roman Yakovenko.
// Distributed under the Boost Software License, Version 1.0. (See
// accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#include "boost/python.hpp"
#ifdef _MSC_VER
    #pragma hdrstop
#endif //_MSC_VER

#include "unittests/data/temprorary_variable_to_be_exported.hpp"

namespace bp = boost::python;

struct pure_virtual_t_wrapper : temprorary_variables::pure_virtual_t, bp::wrapper< temprorary_variables::pure_virtual_t > {

    pure_virtual_t_wrapper()
    : temprorary_variables::pure_virtual_t()
      , bp::wrapper< temprorary_variables::pure_virtual_t >()
    {}

    virtual ::std::string const & name(  ) const {
        throw std::logic_error("Function, that returns reference to some object, could not be overriden from Python.");
    }

    virtual ::std::string & name_ref(  ){
        throw std::logic_error("Function, that returns reference to some object, could not be overriden from Python.");
    }

};

struct virtual_t_wrapper : temprorary_variables::virtual_t, bp::wrapper< temprorary_variables::virtual_t > {

    virtual_t_wrapper(temprorary_variables::virtual_t const & arg )
    : temprorary_variables::virtual_t( arg )
      , bp::wrapper< temprorary_variables::virtual_t >()
    {}

    virtual_t_wrapper( )
    : temprorary_variables::virtual_t( )
      , bp::wrapper< temprorary_variables::virtual_t >()
    {}

    virtual ::std::string const & name_protected(  ) const {
        if( bp::override name_protected = this->get_override( "name_protected" ) )
            return name_protected(  );
        else
            return temprorary_variables::virtual_t::name_protected(  );
    }
    
    virtual ::std::string const & default_name_protected(  ) const {
        return this->temprorary_variables::virtual_t::name_protected( );
    }

};

struct virtual2_t_wrapper : temprorary_variables::virtual2_t, bp::wrapper< temprorary_variables::virtual2_t > {

    virtual2_t_wrapper( )
    : temprorary_variables::virtual2_t( )
      , bp::wrapper< temprorary_variables::virtual2_t >()
    {}

    virtual ::std::string const & name_protected_pure(  ) const {
        throw std::logic_error("Function, that returns reference to some object, could not be overriden from Python.");
    }

    virtual ::std::string const & name_protected(  ) const {
        if( bp::override name_protected = this->get_override( "name_protected" ) )
            return name_protected(  );
        else
            return temprorary_variables::virtual2_t::name_protected(  );
    }
    
    virtual ::std::string const & default_name_protected(  ) const {
        return this->temprorary_variables::virtual2_t::name_protected( );
    }

    virtual ::std::string const & name_private_pure(  ) const {
        throw std::logic_error("Function, that returns reference to some object, could not be overriden from Python.");
    }

};

BOOST_PYTHON_MODULE(temprorary_variable){
    bp::class_< pure_virtual_t_wrapper, boost::noncopyable >( "pure_virtual_t" )    
        .def( "name"
                , bp::pure_virtual( &::temprorary_variables::pure_virtual_t::name )
                , bp::return_value_policy< bp::copy_const_reference, bp::default_call_policies >() )    
        .def( "name_ref"
                , bp::pure_virtual( &::temprorary_variables::pure_virtual_t::name_ref )
                , bp::return_value_policy< bp::copy_non_const_reference, bp::default_call_policies >() );

    bp::class_< temprorary_variables::named_item_t >( "named_item_t" )    
        .def( bp::init< >()[bp::default_call_policies()] )    
        .def( "name"
                , &temprorary_variables::named_item_t::name
                , bp::return_value_policy< bp::copy_const_reference, bp::default_call_policies >() );

    bp::class_< virtual_t_wrapper >( "virtual_t" )    
        .def( bp::init< >()[bp::default_call_policies()] )    
        .def( "name"
                , &temprorary_variables::virtual_t::name
                , bp::return_value_policy< bp::copy_const_reference, bp::default_call_policies >() )    
        .def( "name_ref"
                , &temprorary_variables::virtual_t::name_ref
                , bp::return_value_policy< bp::copy_non_const_reference, bp::default_call_policies >() )    
        .def( "name_protected"
                , &virtual_t_wrapper::name_protected
                , bp::return_value_policy< bp::copy_const_reference, bp::default_call_policies >() )    
        .def_readwrite( "m_name", &temprorary_variables::virtual_t::m_name );

    bp::class_< virtual2_t_wrapper, boost::noncopyable >( "virtual2_t" )    
        .def( bp::init< >()[bp::default_call_policies()] )    
        .def( "name_protected_pure"
                , bp::pure_virtual( &virtual2_t_wrapper::name_protected_pure )
                , bp::return_value_policy< bp::copy_const_reference, bp::default_call_policies >() )    
        .def( "name_protected"
                , &virtual2_t_wrapper::name_protected
                , bp::return_value_policy< bp::copy_const_reference, bp::default_call_policies >() )    
        .def_readwrite( "m_name", &temprorary_variables::virtual2_t::m_name );

    bp::def( "get_name_ref"
            , (::std::string & (*)( ::temprorary_variables::virtual_t & ))(&temprorary_variables::get_name_ref)
            , ( bp::arg("ni") )
            , bp::return_value_policy< bp::copy_non_const_reference, bp::default_call_policies >() );

    bp::def( "get_name"
            , (::std::string const & (*)( ::temprorary_variables::virtual_t const & ))(&temprorary_variables::get_name)
            , ( bp::arg("ni") )
            , bp::return_value_policy< bp::copy_const_reference, bp::default_call_policies >() );

    bp::def( "get_name_ref"
            , (::std::string & (*)( ::temprorary_variables::pure_virtual_t & ))(&temprorary_variables::get_name_ref)
            , ( bp::arg("ni") )
            , bp::return_value_policy< bp::copy_non_const_reference, bp::default_call_policies >() );

    bp::def( "get_name"
            , (::std::string const & (*)( ::temprorary_variables::pure_virtual_t const & ))(&temprorary_variables::get_name)
            , ( bp::arg("ni") )
            , bp::return_value_policy< bp::copy_const_reference, bp::default_call_policies >() );

    bp::def( "get_name"
            , (::std::string const & (*)( ::temprorary_variables::named_item_t const & ))(&temprorary_variables::get_name)
            , ( bp::arg("ni") )
            , bp::return_value_policy< bp::copy_const_reference, bp::default_call_policies >() );
}
