// This file has been generated by pyplusplus.

// Copyright 2004 Roman Yakovenko.
// Distributed under the Boost Software License, Version 1.0. (See
// accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

// std directories: ['/home/roman/boost_cvs', '/usr/include/python2.3']
// user defined directories: ['/home/roman/pygccxml_sources/source/pyplusplus']

#include "boost/python.hpp"
#ifdef _MSC_VER
    #pragma hdrstop
#endif //_MSC_VER

#include "unittests/data/abstract_classes_to_be_exported.hpp"

namespace bp = boost::python;

struct base_wrapper : abstract_classes::base, bp::wrapper< abstract_classes::base > {

    base_wrapper(abstract_classes::base const & arg )
    : abstract_classes::base( arg )
      , bp::wrapper< abstract_classes::base >()
    {}

    base_wrapper()
    : abstract_classes::base()
      , bp::wrapper< abstract_classes::base >()
    {}

    virtual int do_smth(  ){
        bp::override do_smth = this->get_override( "do_smth" );
        return do_smth(  );
    }

};

struct derived_wrapper : abstract_classes::derived, bp::wrapper< abstract_classes::derived > {

    derived_wrapper(abstract_classes::derived const & arg )
    : abstract_classes::derived( arg )
      , bp::wrapper< abstract_classes::derived >()
    {}

    derived_wrapper()
    : abstract_classes::derived()
      , bp::wrapper< abstract_classes::derived >()
    {}

    virtual int do_smth_else(  ){
        bp::override do_smth_else = this->get_override( "do_smth_else" );
        return do_smth_else(  );
    }

};

BOOST_PYTHON_MODULE(abstract_classes){
    bp::class_< base_wrapper, boost::noncopyable >( "base" )    
        .def( "do_smth"
                , bp::pure_virtual( &base_wrapper::do_smth )
                , bp::default_call_policies() );

    bp::class_< derived_wrapper, bp::bases< abstract_classes::base >, boost::noncopyable >( "derived" )    
        .def( "do_smth_else"
                , bp::pure_virtual( &derived_wrapper::do_smth_else )
                , bp::default_call_policies() );
}
