// This file has been generated by pyplusplus.

// Copyright 2004 Roman Yakovenko.
// Distributed under the Boost Software License, Version 1.0. (See
// accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#include "boost/python.hpp"
#ifdef _MSC_VER
    #pragma hdrstop
#endif //_MSC_VER

#include "unittests/data/regression1_to_be_exported.hpp"

namespace bp = boost::python;

struct updater_i_wrapper : regression_1::updater_i, bp::wrapper< regression_1::updater_i > {

    updater_i_wrapper()
    : regression_1::updater_i()
      , bp::wrapper< regression_1::updater_i >()
    {}

    virtual void update_by_ref( ::regression_1::data & d ){
        bp::override update_by_ref = this->get_override( "update_by_ref" );
        update_by_ref( boost::ref(d)  );
    }

    virtual void update_by_ptr( ::regression_1::data * d ){
        bp::override update_by_ptr = this->get_override( "update_by_ptr" );
        update_by_ptr( boost::python::ptr(d)  );
    }

};

struct some_updater_wrapper : regression_1::some_updater, bp::wrapper< regression_1::some_updater > {

    some_updater_wrapper(regression_1::some_updater const & arg )
    : regression_1::some_updater( arg )
      , bp::wrapper< regression_1::some_updater >()
    {}

    some_updater_wrapper()
    : regression_1::some_updater()
      , bp::wrapper< regression_1::some_updater >()
    {}

    virtual void update_by_ref( ::regression_1::data & d ){
        if( bp::override update_by_ref = this->get_override( "update_by_ref" ) )
            update_by_ref( boost::ref(d)  );
        else
            regression_1::some_updater::update_by_ref( boost::ref(d)  );
    }
    
    virtual void default_update_by_ref( ::regression_1::data & d ){
        this->regression_1::some_updater::update_by_ref( boost::ref(d) );
    }

    virtual void update_by_ptr( ::regression_1::data * d ){
        if( bp::override update_by_ptr = this->get_override( "update_by_ptr" ) )
            update_by_ptr( boost::python::ptr(d)  );
        else
            regression_1::some_updater::update_by_ptr( boost::python::ptr(d)  );
    }
    
    virtual void default_update_by_ptr( ::regression_1::data * d ){
        this->regression_1::some_updater::update_by_ptr( boost::python::ptr(d) );
    }

};

BOOST_PYTHON_MODULE(regression1){
    bp::class_< regression_1::updater_holder >( "updater_holder" )    
        .def( "set_updater"
                , &regression_1::updater_holder::set_updater
                , ( bp::arg("new_updater") )
                , bp::with_custodian_and_ward< 1, 2, bp::default_call_policies >() )    
        .def( "update_by_ref"
                , &regression_1::updater_holder::update_by_ref
                , bp::default_call_policies() )    
        .def( "update_by_ptr"
                , &regression_1::updater_holder::update_by_ptr
                , bp::default_call_policies() )    
        .def( "get_data"
                , &regression_1::updater_holder::get_data
                , bp::return_value_policy< bp::copy_const_reference, bp::default_call_policies >() );

    bp::class_< regression_1::data >( "data" )    
        .def_readwrite( "a", &regression_1::data::a );

    bp::class_< updater_i_wrapper, boost::noncopyable >( "updater_i" )    
        .def( "update_by_ref"
                , bp::pure_virtual( &::regression_1::updater_i::update_by_ref )
                , ( bp::arg("d") )
                , bp::default_call_policies() )    
        .def( "update_by_ptr"
                , bp::pure_virtual( &::regression_1::updater_i::update_by_ptr )
                , ( bp::arg("d") )
                , bp::default_call_policies() );

    bp::class_< some_updater_wrapper, bp::bases< regression_1::updater_i > >( "some_updater" )    
        .def( "update_by_ref"
                , &regression_1::some_updater::update_by_ref, &some_updater_wrapper::default_update_by_ref
                , ( bp::arg("d") )
                , bp::default_call_policies() )    
        .def( "update_by_ptr"
                , &regression_1::some_updater::update_by_ptr, &some_updater_wrapper::default_update_by_ptr
                , ( bp::arg("d") )
                , bp::default_call_policies() );
}
