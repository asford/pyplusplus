// This file has been generated by pyplusplus.

// Copyright 2004 Roman Yakovenko.
// Distributed under the Boost Software License, Version 1.0. (See
// accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

// std directories: ['d:\\boost_cvs', 'c:\\python\\include']
// user defined directories: ['d:\\pygccxml_sources\\source\\pyplusplus']

#include "boost/python.hpp"
#ifdef _MSC_VER
    #pragma hdrstop
#endif //_MSC_VER

#include "__array_1.pypp.hpp"

#include "unittests/data/tnfox_bugs_to_be_exported.hpp"

namespace bp = boost::python;

struct FXWinShellLink_wrapper : FX::FXWinShellLink, bp::wrapper< FX::FXWinShellLink > {

    FXWinShellLink_wrapper(FX::FXWinShellLink const & arg )
    : FX::FXWinShellLink( arg )
      , bp::wrapper< FX::FXWinShellLink >()
    {}

    FXWinShellLink_wrapper()
    : FX::FXWinShellLink()
      , bp::wrapper< FX::FXWinShellLink >()
    {}

    struct Header_wrapper : FX::FXWinShellLink::Header, bp::wrapper< FX::FXWinShellLink::Header > {
    
        Header_wrapper(FX::FXWinShellLink::Header const & arg )
        : FX::FXWinShellLink::Header( arg )
          , bp::wrapper< FX::FXWinShellLink::Header >()
        {}
    
        Header_wrapper()
        : FX::FXWinShellLink::Header()
          , bp::wrapper< FX::FXWinShellLink::Header >()
        {}
    
        struct Flags_wrapper : FX::FXWinShellLink::Header::Flags, bp::wrapper< FX::FXWinShellLink::Header::Flags > {
        
            Flags_wrapper(FX::FXWinShellLink::Header::Flags const & arg )
            : FX::FXWinShellLink::Header::Flags( arg )
              , bp::wrapper< FX::FXWinShellLink::Header::Flags >()
            {}
        
            Flags_wrapper()
            : FX::FXWinShellLink::Header::Flags()
              , bp::wrapper< FX::FXWinShellLink::Header::Flags >()
            {}
        
            struct impl_wrapper : FX::FXWinShellLink::Header::Flags::impl, bp::wrapper< FX::FXWinShellLink::Header::Flags::impl > {
            
                impl_wrapper(FX::FXWinShellLink::Header::Flags::impl const & arg )
                : FX::FXWinShellLink::Header::Flags::impl( arg )
                  , bp::wrapper< FX::FXWinShellLink::Header::Flags::impl >()
                {}
            
                impl_wrapper()
                : FX::FXWinShellLink::Header::Flags::impl()
                  , bp::wrapper< FX::FXWinShellLink::Header::Flags::impl >()
                {}
            
                unsigned int get_hasItemIdList() const {
                    return hasItemIdList;
                }
                
                void set_hasItemIdList( unsigned int new_value ){ 
                    hasItemIdList = new_value;
                }
            
                unsigned int get_pointsToFileOrDir() const {
                    return pointsToFileOrDir;
                }
                
                void set_pointsToFileOrDir( unsigned int new_value ){ 
                    pointsToFileOrDir = new_value;
                }
            
                unsigned int get_hasDescription() const {
                    return hasDescription;
                }
                
                void set_hasDescription( unsigned int new_value ){ 
                    hasDescription = new_value;
                }
            
                unsigned int get_hasRelativePath() const {
                    return hasRelativePath;
                }
                
                void set_hasRelativePath( unsigned int new_value ){ 
                    hasRelativePath = new_value;
                }
            
                unsigned int get_hasWorkingDir() const {
                    return hasWorkingDir;
                }
                
                void set_hasWorkingDir( unsigned int new_value ){ 
                    hasWorkingDir = new_value;
                }
            
                unsigned int get_hasCmdLineArgs() const {
                    return hasCmdLineArgs;
                }
                
                void set_hasCmdLineArgs( unsigned int new_value ){ 
                    hasCmdLineArgs = new_value;
                }
            
                unsigned int get_hasCustomIcon() const {
                    return hasCustomIcon;
                }
                
                void set_hasCustomIcon( unsigned int new_value ){ 
                    hasCustomIcon = new_value;
                }
            
                unsigned int get_useWorkingDir() const {
                    return useWorkingDir;
                }
                
                void set_useWorkingDir( unsigned int new_value ){ 
                    useWorkingDir = new_value;
                }
            
                unsigned int get_unused() const {
                    return unused;
                }
                
                void set_unused( unsigned int new_value ){ 
                    unused = new_value;
                }
            
            };
        
        };
    
        pyplusplus::containers::static_sized::array_1_t< char, 16 >
        pyplusplus_guid_wrapper(){
            return pyplusplus::containers::static_sized::array_1_t< char, 16 >( guid );
        }
    
    };

};

BOOST_PYTHON_MODULE(tnfox_bugs){
    if( true ){
        typedef bp::class_< FXWinShellLink_wrapper > FXWinShellLink_exposer_t;
        FXWinShellLink_exposer_t FXWinShellLink_exposer = FXWinShellLink_exposer_t( "FXWinShellLink" );
        bp::scope FXWinShellLink_scope( FXWinShellLink_exposer );
        if( true ){
            typedef bp::class_< FXWinShellLink_wrapper::Header_wrapper > Header_exposer_t;
            Header_exposer_t Header_exposer = Header_exposer_t( "Header" );
            bp::scope Header_scope( Header_exposer );
            if( true ){
                typedef bp::class_< FXWinShellLink_wrapper::Header_wrapper::Flags_wrapper > Flags_exposer_t;
                Flags_exposer_t Flags_exposer = Flags_exposer_t( "Flags" );
                bp::scope Flags_scope( Flags_exposer );
                bp::class_< FXWinShellLink_wrapper::Header_wrapper::Flags_wrapper::impl_wrapper >( "impl" )    
                    .add_property( "hasItemIdList"
                                , (unsigned int ( FXWinShellLink_wrapper::Header_wrapper::Flags_wrapper::impl_wrapper::* )(  ) const)(&FXWinShellLink_wrapper::Header_wrapper::Flags_wrapper::impl_wrapper::get_hasItemIdList)
                                , (void ( FXWinShellLink_wrapper::Header_wrapper::Flags_wrapper::impl_wrapper::* )( unsigned int ) )(&FXWinShellLink_wrapper::Header_wrapper::Flags_wrapper::impl_wrapper::set_hasItemIdList) )    
                    .add_property( "pointsToFileOrDir"
                                , (unsigned int ( FXWinShellLink_wrapper::Header_wrapper::Flags_wrapper::impl_wrapper::* )(  ) const)(&FXWinShellLink_wrapper::Header_wrapper::Flags_wrapper::impl_wrapper::get_pointsToFileOrDir)
                                , (void ( FXWinShellLink_wrapper::Header_wrapper::Flags_wrapper::impl_wrapper::* )( unsigned int ) )(&FXWinShellLink_wrapper::Header_wrapper::Flags_wrapper::impl_wrapper::set_pointsToFileOrDir) )    
                    .add_property( "hasDescription"
                                , (unsigned int ( FXWinShellLink_wrapper::Header_wrapper::Flags_wrapper::impl_wrapper::* )(  ) const)(&FXWinShellLink_wrapper::Header_wrapper::Flags_wrapper::impl_wrapper::get_hasDescription)
                                , (void ( FXWinShellLink_wrapper::Header_wrapper::Flags_wrapper::impl_wrapper::* )( unsigned int ) )(&FXWinShellLink_wrapper::Header_wrapper::Flags_wrapper::impl_wrapper::set_hasDescription) )    
                    .add_property( "hasRelativePath"
                                , (unsigned int ( FXWinShellLink_wrapper::Header_wrapper::Flags_wrapper::impl_wrapper::* )(  ) const)(&FXWinShellLink_wrapper::Header_wrapper::Flags_wrapper::impl_wrapper::get_hasRelativePath)
                                , (void ( FXWinShellLink_wrapper::Header_wrapper::Flags_wrapper::impl_wrapper::* )( unsigned int ) )(&FXWinShellLink_wrapper::Header_wrapper::Flags_wrapper::impl_wrapper::set_hasRelativePath) )    
                    .add_property( "hasWorkingDir"
                                , (unsigned int ( FXWinShellLink_wrapper::Header_wrapper::Flags_wrapper::impl_wrapper::* )(  ) const)(&FXWinShellLink_wrapper::Header_wrapper::Flags_wrapper::impl_wrapper::get_hasWorkingDir)
                                , (void ( FXWinShellLink_wrapper::Header_wrapper::Flags_wrapper::impl_wrapper::* )( unsigned int ) )(&FXWinShellLink_wrapper::Header_wrapper::Flags_wrapper::impl_wrapper::set_hasWorkingDir) )    
                    .add_property( "hasCmdLineArgs"
                                , (unsigned int ( FXWinShellLink_wrapper::Header_wrapper::Flags_wrapper::impl_wrapper::* )(  ) const)(&FXWinShellLink_wrapper::Header_wrapper::Flags_wrapper::impl_wrapper::get_hasCmdLineArgs)
                                , (void ( FXWinShellLink_wrapper::Header_wrapper::Flags_wrapper::impl_wrapper::* )( unsigned int ) )(&FXWinShellLink_wrapper::Header_wrapper::Flags_wrapper::impl_wrapper::set_hasCmdLineArgs) )    
                    .add_property( "hasCustomIcon"
                                , (unsigned int ( FXWinShellLink_wrapper::Header_wrapper::Flags_wrapper::impl_wrapper::* )(  ) const)(&FXWinShellLink_wrapper::Header_wrapper::Flags_wrapper::impl_wrapper::get_hasCustomIcon)
                                , (void ( FXWinShellLink_wrapper::Header_wrapper::Flags_wrapper::impl_wrapper::* )( unsigned int ) )(&FXWinShellLink_wrapper::Header_wrapper::Flags_wrapper::impl_wrapper::set_hasCustomIcon) )    
                    .add_property( "useWorkingDir"
                                , (unsigned int ( FXWinShellLink_wrapper::Header_wrapper::Flags_wrapper::impl_wrapper::* )(  ) const)(&FXWinShellLink_wrapper::Header_wrapper::Flags_wrapper::impl_wrapper::get_useWorkingDir)
                                , (void ( FXWinShellLink_wrapper::Header_wrapper::Flags_wrapper::impl_wrapper::* )( unsigned int ) )(&FXWinShellLink_wrapper::Header_wrapper::Flags_wrapper::impl_wrapper::set_useWorkingDir) )    
                    .add_property( "unused"
                                , (unsigned int ( FXWinShellLink_wrapper::Header_wrapper::Flags_wrapper::impl_wrapper::* )(  ) const)(&FXWinShellLink_wrapper::Header_wrapper::Flags_wrapper::impl_wrapper::get_unused)
                                , (void ( FXWinShellLink_wrapper::Header_wrapper::Flags_wrapper::impl_wrapper::* )( unsigned int ) )(&FXWinShellLink_wrapper::Header_wrapper::Flags_wrapper::impl_wrapper::set_unused) );
                Flags_exposer.def_readwrite( "raw", &FX::FXWinShellLink::Header::Flags::raw );
            }
            Header_exposer.def_readwrite( "length", &FX::FXWinShellLink::Header::length );
            pyplusplus::containers::static_sized::register_array_1< char, 16, bp::default_call_policies >( "__array_1_char_16" );
            Header_exposer.add_property( "guid"
                , bp::make_function( (pyplusplus::containers::static_sized::array_1_t< char, 16 > ( FXWinShellLink_wrapper::Header_wrapper::* )(  ) )(&FXWinShellLink_wrapper::Header_wrapper::pyplusplus_guid_wrapper)
                            , bp::with_custodian_and_ward_postcall< 0, 1, bp::default_call_policies >() ) );;
            Header_exposer.def_readwrite( "flags", &FX::FXWinShellLink::Header::flags );
        }
    }
}
