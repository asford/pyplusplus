// This file has been generated by pyplusplus.

// Copyright 2004 Roman Yakovenko.
// Distributed under the Boost Software License, Version 1.0. (See
// accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#include "boost/python.hpp"
#ifdef _MSC_VER
    #pragma hdrstop
#endif //_MSC_VER

#include "unittests/data/member_functions_to_be_exported.hpp"

namespace bp = boost::python;

struct private_base_t_wrapper : member_functions::private_base_t, bp::wrapper< member_functions::private_base_t > {

    private_base_t_wrapper()
    : member_functions::private_base_t()
      , bp::wrapper< member_functions::private_base_t >()
    {}

    virtual int pure_virtual( int x ){
        bp::override pure_virtual = this->get_override( "pure_virtual" );
        return pure_virtual( x  );
    }

    virtual int pure_virtual_overloaded( int x ){
        bp::override pure_virtual_overloaded = this->get_override( "pure_virtual_overloaded" );
        return pure_virtual_overloaded( x  );
    }

    virtual int pure_virtual_overloaded( int x, int y ){
        bp::override pure_virtual_overloaded = this->get_override( "pure_virtual_overloaded" );
        return pure_virtual_overloaded( x, y  );
    }

    virtual int pure_virtual_const( int x ) const {
        bp::override pure_virtual_const = this->get_override( "pure_virtual_const" );
        return pure_virtual_const( x  );
    }

    virtual int pure_virtual_const_overloaded( int x ) const {
        bp::override pure_virtual_const_overloaded = this->get_override( "pure_virtual_const_overloaded" );
        return pure_virtual_const_overloaded( x  );
    }

    virtual int pure_virtual_const_overloaded( int x, int y ) const {
        bp::override pure_virtual_const_overloaded = this->get_override( "pure_virtual_const_overloaded" );
        return pure_virtual_const_overloaded( x, y  );
    }

};

struct protected_mf_t_wrapper : member_functions::protected_mf_t, bp::wrapper< member_functions::protected_mf_t > {

    protected_mf_t_wrapper(member_functions::protected_mf_t const & arg )
    : member_functions::protected_mf_t( arg )
      , bp::wrapper< member_functions::protected_mf_t >()
    {}

    protected_mf_t_wrapper()
    : member_functions::protected_mf_t()
      , bp::wrapper< member_functions::protected_mf_t >()
    {}

    static int x(  ){
        return ::member_functions::protected_mf_t::x(  );
    }

};

struct protected_base_t_wrapper : member_functions::protected_base_t, bp::wrapper< member_functions::protected_base_t > {

    protected_base_t_wrapper()
    : member_functions::protected_base_t()
      , bp::wrapper< member_functions::protected_base_t >()
    {}

    virtual int regular( int x ){
        return this->member_functions::protected_base_t::regular( x );
    }

    virtual int regular_overloaded( int x ){
        return this->member_functions::protected_base_t::regular_overloaded( x );
    }

    virtual int regular_overloaded( int x, int y ){
        return this->member_functions::protected_base_t::regular_overloaded( x, y );
    }

    virtual int regular_const( int x ) const {
        return this->member_functions::protected_base_t::regular_const( x );
    }

    virtual int regular_const_overloaded( int x ) const {
        return this->member_functions::protected_base_t::regular_const_overloaded( x );
    }

    virtual int regular_const_overloaded( int x, int y ) const {
        return this->member_functions::protected_base_t::regular_const_overloaded( x, y );
    }

    virtual int virtual_( int x ){
        if( bp::override virtual_ = this->get_override( "virtual_" ) )
            return virtual_( x  );
        else
            return member_functions::protected_base_t::virtual_( x  );
    }
    
    virtual int default_virtual_( int x ){
        return this->member_functions::protected_base_t::virtual_( x );
    }

    virtual int virtual_overloaded( int x ){
        if( bp::override virtual_overloaded = this->get_override( "virtual_overloaded" ) )
            return virtual_overloaded( x  );
        else
            return member_functions::protected_base_t::virtual_overloaded( x  );
    }
    
    virtual int default_virtual_overloaded( int x ){
        return this->member_functions::protected_base_t::virtual_overloaded( x );
    }

    virtual int virtual_overloaded( int x, int y ){
        if( bp::override virtual_overloaded = this->get_override( "virtual_overloaded" ) )
            return virtual_overloaded( x, y  );
        else
            return member_functions::protected_base_t::virtual_overloaded( x, y  );
    }
    
    virtual int default_virtual_overloaded( int x, int y ){
        return this->member_functions::protected_base_t::virtual_overloaded( x, y );
    }

    virtual int virtual_const( int x ) const {
        if( bp::override virtual_const = this->get_override( "virtual_const" ) )
            return virtual_const( x  );
        else
            return member_functions::protected_base_t::virtual_const( x  );
    }
    
    virtual int default_virtual_const( int x ) const {
        return this->member_functions::protected_base_t::virtual_const( x );
    }

    virtual int virtual_const_overloaded( int x ) const {
        if( bp::override virtual_const_overloaded = this->get_override( "virtual_const_overloaded" ) )
            return virtual_const_overloaded( x  );
        else
            return member_functions::protected_base_t::virtual_const_overloaded( x  );
    }
    
    virtual int default_virtual_const_overloaded( int x ) const {
        return this->member_functions::protected_base_t::virtual_const_overloaded( x );
    }

    virtual int virtual_const_overloaded( int x, int y ) const {
        if( bp::override virtual_const_overloaded = this->get_override( "virtual_const_overloaded" ) )
            return virtual_const_overloaded( x, y  );
        else
            return member_functions::protected_base_t::virtual_const_overloaded( x, y  );
    }
    
    virtual int default_virtual_const_overloaded( int x, int y ) const {
        return this->member_functions::protected_base_t::virtual_const_overloaded( x, y );
    }

    virtual int pure_virtual( int x ){
        bp::override pure_virtual = this->get_override( "pure_virtual" );
        return pure_virtual( x  );
    }

    virtual int pure_virtual_overloaded( int x ){
        bp::override pure_virtual_overloaded = this->get_override( "pure_virtual_overloaded" );
        return pure_virtual_overloaded( x  );
    }

    virtual int pure_virtual_overloaded( int x, int y ){
        bp::override pure_virtual_overloaded = this->get_override( "pure_virtual_overloaded" );
        return pure_virtual_overloaded( x, y  );
    }

    virtual int pure_virtual_const( int x ) const {
        bp::override pure_virtual_const = this->get_override( "pure_virtual_const" );
        return pure_virtual_const( x  );
    }

    virtual int pure_virtual_const_overloaded( int x ) const {
        bp::override pure_virtual_const_overloaded = this->get_override( "pure_virtual_const_overloaded" );
        return pure_virtual_const_overloaded( x  );
    }

    virtual int pure_virtual_const_overloaded( int x, int y ) const {
        bp::override pure_virtual_const_overloaded = this->get_override( "pure_virtual_const_overloaded" );
        return pure_virtual_const_overloaded( x, y  );
    }

};

struct protected_public_derived_t_wrapper : member_functions::protected_public_derived_t, bp::wrapper< member_functions::protected_public_derived_t > {

    protected_public_derived_t_wrapper(member_functions::protected_public_derived_t const & arg )
    : member_functions::protected_public_derived_t( arg )
      , bp::wrapper< member_functions::protected_public_derived_t >()
    {}

    protected_public_derived_t_wrapper()
    : member_functions::protected_public_derived_t()
      , bp::wrapper< member_functions::protected_public_derived_t >()
    {}

    virtual int pure_virtual( int x ){
        if( bp::override pure_virtual = this->get_override( "pure_virtual" ) )
            return pure_virtual( x  );
        else
            return member_functions::protected_public_derived_t::pure_virtual( x  );
    }
    
    virtual int default_pure_virtual( int x ){
        return this->member_functions::protected_public_derived_t::pure_virtual( x );
    }

    virtual int pure_virtual_overloaded( int x ){
        if( bp::override pure_virtual_overloaded = this->get_override( "pure_virtual_overloaded" ) )
            return pure_virtual_overloaded( x  );
        else
            return member_functions::protected_public_derived_t::pure_virtual_overloaded( x  );
    }
    
    virtual int default_pure_virtual_overloaded( int x ){
        return this->member_functions::protected_public_derived_t::pure_virtual_overloaded( x );
    }

    virtual int pure_virtual_overloaded( int x, int y ){
        if( bp::override pure_virtual_overloaded = this->get_override( "pure_virtual_overloaded" ) )
            return pure_virtual_overloaded( x, y  );
        else
            return member_functions::protected_public_derived_t::pure_virtual_overloaded( x, y  );
    }
    
    virtual int default_pure_virtual_overloaded( int x, int y ){
        return this->member_functions::protected_public_derived_t::pure_virtual_overloaded( x, y );
    }

    virtual int pure_virtual_const( int x ) const {
        if( bp::override pure_virtual_const = this->get_override( "pure_virtual_const" ) )
            return pure_virtual_const( x  );
        else
            return member_functions::protected_public_derived_t::pure_virtual_const( x  );
    }
    
    virtual int default_pure_virtual_const( int x ) const {
        return this->member_functions::protected_public_derived_t::pure_virtual_const( x );
    }

    virtual int pure_virtual_const_overloaded( int x ) const {
        if( bp::override pure_virtual_const_overloaded = this->get_override( "pure_virtual_const_overloaded" ) )
            return pure_virtual_const_overloaded( x  );
        else
            return member_functions::protected_public_derived_t::pure_virtual_const_overloaded( x  );
    }
    
    virtual int default_pure_virtual_const_overloaded( int x ) const {
        return this->member_functions::protected_public_derived_t::pure_virtual_const_overloaded( x );
    }

    virtual int pure_virtual_const_overloaded( int x, int y ) const {
        if( bp::override pure_virtual_const_overloaded = this->get_override( "pure_virtual_const_overloaded" ) )
            return pure_virtual_const_overloaded( x, y  );
        else
            return member_functions::protected_public_derived_t::pure_virtual_const_overloaded( x, y  );
    }
    
    virtual int default_pure_virtual_const_overloaded( int x, int y ) const {
        return this->member_functions::protected_public_derived_t::pure_virtual_const_overloaded( x, y );
    }

};

struct protected_protected_derived_t_wrapper : member_functions::protected_protected_derived_t, bp::wrapper< member_functions::protected_protected_derived_t > {

    protected_protected_derived_t_wrapper(member_functions::protected_protected_derived_t const & arg )
    : member_functions::protected_protected_derived_t( arg )
      , bp::wrapper< member_functions::protected_protected_derived_t >()
    {}

    protected_protected_derived_t_wrapper()
    : member_functions::protected_protected_derived_t()
      , bp::wrapper< member_functions::protected_protected_derived_t >()
    {}

    virtual int pure_virtual( int x ){
        if( bp::override pure_virtual = this->get_override( "pure_virtual" ) )
            return pure_virtual( x  );
        else
            return member_functions::protected_protected_derived_t::pure_virtual( x  );
    }
    
    virtual int default_pure_virtual( int x ){
        return this->member_functions::protected_protected_derived_t::pure_virtual( x );
    }

    virtual int pure_virtual_overloaded( int x ){
        if( bp::override pure_virtual_overloaded = this->get_override( "pure_virtual_overloaded" ) )
            return pure_virtual_overloaded( x  );
        else
            return member_functions::protected_protected_derived_t::pure_virtual_overloaded( x  );
    }
    
    virtual int default_pure_virtual_overloaded( int x ){
        return this->member_functions::protected_protected_derived_t::pure_virtual_overloaded( x );
    }

    virtual int pure_virtual_overloaded( int x, int y ){
        if( bp::override pure_virtual_overloaded = this->get_override( "pure_virtual_overloaded" ) )
            return pure_virtual_overloaded( x, y  );
        else
            return member_functions::protected_protected_derived_t::pure_virtual_overloaded( x, y  );
    }
    
    virtual int default_pure_virtual_overloaded( int x, int y ){
        return this->member_functions::protected_protected_derived_t::pure_virtual_overloaded( x, y );
    }

    virtual int pure_virtual_const( int x ) const {
        if( bp::override pure_virtual_const = this->get_override( "pure_virtual_const" ) )
            return pure_virtual_const( x  );
        else
            return member_functions::protected_protected_derived_t::pure_virtual_const( x  );
    }
    
    virtual int default_pure_virtual_const( int x ) const {
        return this->member_functions::protected_protected_derived_t::pure_virtual_const( x );
    }

    virtual int pure_virtual_const_overloaded( int x ) const {
        if( bp::override pure_virtual_const_overloaded = this->get_override( "pure_virtual_const_overloaded" ) )
            return pure_virtual_const_overloaded( x  );
        else
            return member_functions::protected_protected_derived_t::pure_virtual_const_overloaded( x  );
    }
    
    virtual int default_pure_virtual_const_overloaded( int x ) const {
        return this->member_functions::protected_protected_derived_t::pure_virtual_const_overloaded( x );
    }

    virtual int pure_virtual_const_overloaded( int x, int y ) const {
        if( bp::override pure_virtual_const_overloaded = this->get_override( "pure_virtual_const_overloaded" ) )
            return pure_virtual_const_overloaded( x, y  );
        else
            return member_functions::protected_protected_derived_t::pure_virtual_const_overloaded( x, y  );
    }
    
    virtual int default_pure_virtual_const_overloaded( int x, int y ) const {
        return this->member_functions::protected_protected_derived_t::pure_virtual_const_overloaded( x, y );
    }

};

struct public_base_t_wrapper : member_functions::public_base_t, bp::wrapper< member_functions::public_base_t > {

    public_base_t_wrapper()
    : member_functions::public_base_t()
      , bp::wrapper< member_functions::public_base_t >()
    {}

    virtual int virtual_( int x ){
        if( bp::override virtual_ = this->get_override( "virtual_" ) )
            return virtual_( x  );
        else
            return member_functions::public_base_t::virtual_( x  );
    }
    
    virtual int default_virtual_( int x ){
        return this->member_functions::public_base_t::virtual_( x );
    }

    virtual int virtual_overloaded( int x ){
        if( bp::override virtual_overloaded = this->get_override( "virtual_overloaded" ) )
            return virtual_overloaded( x  );
        else
            return member_functions::public_base_t::virtual_overloaded( x  );
    }
    
    virtual int default_virtual_overloaded( int x ){
        return this->member_functions::public_base_t::virtual_overloaded( x );
    }

    virtual int virtual_overloaded( int x, int y ){
        if( bp::override virtual_overloaded = this->get_override( "virtual_overloaded" ) )
            return virtual_overloaded( x, y  );
        else
            return member_functions::public_base_t::virtual_overloaded( x, y  );
    }
    
    virtual int default_virtual_overloaded( int x, int y ){
        return this->member_functions::public_base_t::virtual_overloaded( x, y );
    }

    virtual int virtual_const( int x ) const {
        if( bp::override virtual_const = this->get_override( "virtual_const" ) )
            return virtual_const( x  );
        else
            return member_functions::public_base_t::virtual_const( x  );
    }
    
    virtual int default_virtual_const( int x ) const {
        return this->member_functions::public_base_t::virtual_const( x );
    }

    virtual int virtual_const_overloaded( int x ) const {
        if( bp::override virtual_const_overloaded = this->get_override( "virtual_const_overloaded" ) )
            return virtual_const_overloaded( x  );
        else
            return member_functions::public_base_t::virtual_const_overloaded( x  );
    }
    
    virtual int default_virtual_const_overloaded( int x ) const {
        return this->member_functions::public_base_t::virtual_const_overloaded( x );
    }

    virtual int virtual_const_overloaded( int x, int y ) const {
        if( bp::override virtual_const_overloaded = this->get_override( "virtual_const_overloaded" ) )
            return virtual_const_overloaded( x, y  );
        else
            return member_functions::public_base_t::virtual_const_overloaded( x, y  );
    }
    
    virtual int default_virtual_const_overloaded( int x, int y ) const {
        return this->member_functions::public_base_t::virtual_const_overloaded( x, y );
    }

    virtual int pure_virtual( int x ){
        bp::override pure_virtual = this->get_override( "pure_virtual" );
        return pure_virtual( x  );
    }

    virtual int pure_virtual_overloaded( int x ){
        bp::override pure_virtual_overloaded = this->get_override( "pure_virtual_overloaded" );
        return pure_virtual_overloaded( x  );
    }

    virtual int pure_virtual_overloaded( int x, int y ){
        bp::override pure_virtual_overloaded = this->get_override( "pure_virtual_overloaded" );
        return pure_virtual_overloaded( x, y  );
    }

    virtual int pure_virtual_const( int x ) const {
        bp::override pure_virtual_const = this->get_override( "pure_virtual_const" );
        return pure_virtual_const( x  );
    }

    virtual int pure_virtual_const_overloaded( int x ) const {
        bp::override pure_virtual_const_overloaded = this->get_override( "pure_virtual_const_overloaded" );
        return pure_virtual_const_overloaded( x  );
    }

    virtual int pure_virtual_const_overloaded( int x, int y ) const {
        bp::override pure_virtual_const_overloaded = this->get_override( "pure_virtual_const_overloaded" );
        return pure_virtual_const_overloaded( x, y  );
    }

};

struct public_derived_t_wrapper : member_functions::public_derived_t, bp::wrapper< member_functions::public_derived_t > {

    public_derived_t_wrapper(member_functions::public_derived_t const & arg )
    : member_functions::public_derived_t( arg )
      , bp::wrapper< member_functions::public_derived_t >()
    {}

    public_derived_t_wrapper()
    : member_functions::public_derived_t()
      , bp::wrapper< member_functions::public_derived_t >()
    {}

    virtual int pure_virtual( int x ){
        if( bp::override pure_virtual = this->get_override( "pure_virtual" ) )
            return pure_virtual( x  );
        else
            return member_functions::public_derived_t::pure_virtual( x  );
    }
    
    virtual int default_pure_virtual( int x ){
        return this->member_functions::public_derived_t::pure_virtual( x );
    }

    virtual int pure_virtual_overloaded( int x ){
        if( bp::override pure_virtual_overloaded = this->get_override( "pure_virtual_overloaded" ) )
            return pure_virtual_overloaded( x  );
        else
            return member_functions::public_derived_t::pure_virtual_overloaded( x  );
    }
    
    virtual int default_pure_virtual_overloaded( int x ){
        return this->member_functions::public_derived_t::pure_virtual_overloaded( x );
    }

    virtual int pure_virtual_overloaded( int x, int y ){
        if( bp::override pure_virtual_overloaded = this->get_override( "pure_virtual_overloaded" ) )
            return pure_virtual_overloaded( x, y  );
        else
            return member_functions::public_derived_t::pure_virtual_overloaded( x, y  );
    }
    
    virtual int default_pure_virtual_overloaded( int x, int y ){
        return this->member_functions::public_derived_t::pure_virtual_overloaded( x, y );
    }

    virtual int pure_virtual_const( int x ) const {
        if( bp::override pure_virtual_const = this->get_override( "pure_virtual_const" ) )
            return pure_virtual_const( x  );
        else
            return member_functions::public_derived_t::pure_virtual_const( x  );
    }
    
    virtual int default_pure_virtual_const( int x ) const {
        return this->member_functions::public_derived_t::pure_virtual_const( x );
    }

    virtual int pure_virtual_const_overloaded( int x ) const {
        if( bp::override pure_virtual_const_overloaded = this->get_override( "pure_virtual_const_overloaded" ) )
            return pure_virtual_const_overloaded( x  );
        else
            return member_functions::public_derived_t::pure_virtual_const_overloaded( x  );
    }
    
    virtual int default_pure_virtual_const_overloaded( int x ) const {
        return this->member_functions::public_derived_t::pure_virtual_const_overloaded( x );
    }

    virtual int pure_virtual_const_overloaded( int x, int y ) const {
        if( bp::override pure_virtual_const_overloaded = this->get_override( "pure_virtual_const_overloaded" ) )
            return pure_virtual_const_overloaded( x, y  );
        else
            return member_functions::public_derived_t::pure_virtual_const_overloaded( x, y  );
    }
    
    virtual int default_pure_virtual_const_overloaded( int x, int y ) const {
        return this->member_functions::public_derived_t::pure_virtual_const_overloaded( x, y );
    }

};

struct private_derived_t_wrapper : member_functions::private_derived_t, bp::wrapper< member_functions::private_derived_t > {

    private_derived_t_wrapper(member_functions::private_derived_t const & arg )
    : member_functions::private_derived_t( arg )
      , bp::wrapper< member_functions::private_derived_t >()
    {}

    private_derived_t_wrapper()
    : member_functions::private_derived_t()
      , bp::wrapper< member_functions::private_derived_t >()
    {}

    virtual int pure_virtual( int x ){
        if( bp::override pure_virtual = this->get_override( "pure_virtual" ) )
            return pure_virtual( x  );
        else
            return member_functions::private_derived_t::pure_virtual( x  );
    }
    
    virtual int default_pure_virtual( int x ){
        return this->member_functions::private_derived_t::pure_virtual( x );
    }

    virtual int pure_virtual_overloaded( int x ){
        if( bp::override pure_virtual_overloaded = this->get_override( "pure_virtual_overloaded" ) )
            return pure_virtual_overloaded( x  );
        else
            return member_functions::private_derived_t::pure_virtual_overloaded( x  );
    }
    
    virtual int default_pure_virtual_overloaded( int x ){
        return this->member_functions::private_derived_t::pure_virtual_overloaded( x );
    }

    virtual int pure_virtual_overloaded( int x, int y ){
        if( bp::override pure_virtual_overloaded = this->get_override( "pure_virtual_overloaded" ) )
            return pure_virtual_overloaded( x, y  );
        else
            return member_functions::private_derived_t::pure_virtual_overloaded( x, y  );
    }
    
    virtual int default_pure_virtual_overloaded( int x, int y ){
        return this->member_functions::private_derived_t::pure_virtual_overloaded( x, y );
    }

    virtual int pure_virtual_const( int x ) const {
        if( bp::override pure_virtual_const = this->get_override( "pure_virtual_const" ) )
            return pure_virtual_const( x  );
        else
            return member_functions::private_derived_t::pure_virtual_const( x  );
    }
    
    virtual int default_pure_virtual_const( int x ) const {
        return this->member_functions::private_derived_t::pure_virtual_const( x );
    }

    virtual int pure_virtual_const_overloaded( int x ) const {
        if( bp::override pure_virtual_const_overloaded = this->get_override( "pure_virtual_const_overloaded" ) )
            return pure_virtual_const_overloaded( x  );
        else
            return member_functions::private_derived_t::pure_virtual_const_overloaded( x  );
    }
    
    virtual int default_pure_virtual_const_overloaded( int x ) const {
        return this->member_functions::private_derived_t::pure_virtual_const_overloaded( x );
    }

    virtual int pure_virtual_const_overloaded( int x, int y ) const {
        if( bp::override pure_virtual_const_overloaded = this->get_override( "pure_virtual_const_overloaded" ) )
            return pure_virtual_const_overloaded( x, y  );
        else
            return member_functions::private_derived_t::pure_virtual_const_overloaded( x, y  );
    }
    
    virtual int default_pure_virtual_const_overloaded( int x, int y ) const {
        return this->member_functions::private_derived_t::pure_virtual_const_overloaded( x, y );
    }

};

BOOST_PYTHON_MODULE(member_functions){
    if( true ){
        typedef bp::class_< private_base_t_wrapper, boost::noncopyable > private_base_t_exposer_t;
        private_base_t_exposer_t private_base_t_exposer = private_base_t_exposer_t( "private_base_t" );
        bp::scope private_base_t_scope( private_base_t_exposer );
        private_base_t_exposer.def( "remove_gcc_warning"
                , &member_functions::private_base_t::remove_gcc_warning
                , bp::default_call_policies() );
    }

    bp::class_< protected_mf_t_wrapper >( "protected_mf_t" )    
        .def( "x"
                , (int (*)(  ))(&protected_mf_t_wrapper::x)
                , bp::default_call_policies() )    
        .staticmethod( "x" );

    if( true ){
        typedef bp::class_< protected_base_t_wrapper, boost::noncopyable > protected_base_t_exposer_t;
        protected_base_t_exposer_t protected_base_t_exposer = protected_base_t_exposer_t( "protected_base_t" );
        bp::scope protected_base_t_scope( protected_base_t_exposer );
        protected_base_t_exposer.def( "regular"
                , &protected_base_t_wrapper::regular
                , ( bp::arg("x") )
                , bp::default_call_policies() );
        protected_base_t_exposer.def( "regular_overloaded"
                , (int ( protected_base_t_wrapper::* )( int ) )(&protected_base_t_wrapper::regular_overloaded)
                , ( bp::arg("x") )
                , bp::default_call_policies() );
        protected_base_t_exposer.def( "regular_overloaded"
                , (int ( protected_base_t_wrapper::* )( int,int ) )(&protected_base_t_wrapper::regular_overloaded)
                , ( bp::arg("x"), bp::arg("y") )
                , bp::default_call_policies() );
        protected_base_t_exposer.def( "regular_const"
                , &protected_base_t_wrapper::regular_const
                , ( bp::arg("x") )
                , bp::default_call_policies() );
        protected_base_t_exposer.def( "regular_const_overloaded"
                , (int ( protected_base_t_wrapper::* )( int ) const)(&protected_base_t_wrapper::regular_const_overloaded)
                , ( bp::arg("x") )
                , bp::default_call_policies() );
        protected_base_t_exposer.def( "regular_const_overloaded"
                , (int ( protected_base_t_wrapper::* )( int,int ) const)(&protected_base_t_wrapper::regular_const_overloaded)
                , ( bp::arg("x"), bp::arg("y") )
                , bp::default_call_policies() );
        protected_base_t_exposer.def( "virtual_"
                , &protected_base_t_wrapper::virtual_
                , ( bp::arg("x") )
                , bp::default_call_policies() );
        protected_base_t_exposer.def( "virtual_overloaded"
                , (int ( protected_base_t_wrapper::* )( int ) )(&protected_base_t_wrapper::virtual_overloaded)
                , ( bp::arg("x") )
                , bp::default_call_policies() );
        protected_base_t_exposer.def( "virtual_overloaded"
                , (int ( protected_base_t_wrapper::* )( int,int ) )(&protected_base_t_wrapper::virtual_overloaded)
                , ( bp::arg("x"), bp::arg("y") )
                , bp::default_call_policies() );
        protected_base_t_exposer.def( "virtual_const"
                , &protected_base_t_wrapper::virtual_const
                , ( bp::arg("x") )
                , bp::default_call_policies() );
        protected_base_t_exposer.def( "virtual_const_overloaded"
                , (int ( protected_base_t_wrapper::* )( int ) const)(&protected_base_t_wrapper::virtual_const_overloaded)
                , ( bp::arg("x") )
                , bp::default_call_policies() );
        protected_base_t_exposer.def( "virtual_const_overloaded"
                , (int ( protected_base_t_wrapper::* )( int,int ) const)(&protected_base_t_wrapper::virtual_const_overloaded)
                , ( bp::arg("x"), bp::arg("y") )
                , bp::default_call_policies() );
        protected_base_t_exposer.def( "pure_virtual"
                , bp::pure_virtual( &protected_base_t_wrapper::pure_virtual )
                , ( bp::arg("x") )
                , bp::default_call_policies() );
        protected_base_t_exposer.def( "pure_virtual_overloaded"
                , bp::pure_virtual( (int ( protected_base_t_wrapper::* )( int ) )(&protected_base_t_wrapper::pure_virtual_overloaded) )
                , ( bp::arg("x") )
                , bp::default_call_policies() );
        protected_base_t_exposer.def( "pure_virtual_overloaded"
                , bp::pure_virtual( (int ( protected_base_t_wrapper::* )( int,int ) )(&protected_base_t_wrapper::pure_virtual_overloaded) )
                , ( bp::arg("x"), bp::arg("y") )
                , bp::default_call_policies() );
        protected_base_t_exposer.def( "pure_virtual_const"
                , bp::pure_virtual( &protected_base_t_wrapper::pure_virtual_const )
                , ( bp::arg("x") )
                , bp::default_call_policies() );
        protected_base_t_exposer.def( "pure_virtual_const_overloaded"
                , bp::pure_virtual( (int ( protected_base_t_wrapper::* )( int ) const)(&protected_base_t_wrapper::pure_virtual_const_overloaded) )
                , ( bp::arg("x") )
                , bp::default_call_policies() );
        protected_base_t_exposer.def( "pure_virtual_const_overloaded"
                , bp::pure_virtual( (int ( protected_base_t_wrapper::* )( int,int ) const)(&protected_base_t_wrapper::pure_virtual_const_overloaded) )
                , ( bp::arg("x"), bp::arg("y") )
                , bp::default_call_policies() );
    }

    if( true ){
        typedef bp::class_< protected_public_derived_t_wrapper, bp::bases< member_functions::protected_base_t > > protected_public_derived_t_exposer_t;
        protected_public_derived_t_exposer_t protected_public_derived_t_exposer = protected_public_derived_t_exposer_t( "protected_public_derived_t" );
        bp::scope protected_public_derived_t_scope( protected_public_derived_t_exposer );
        protected_public_derived_t_exposer.def( "pure_virtual"
                , &member_functions::protected_public_derived_t::pure_virtual, &protected_public_derived_t_wrapper::default_pure_virtual
                , ( bp::arg("x") )
                , bp::default_call_policies() );
        protected_public_derived_t_exposer.def( "pure_virtual_overloaded"
                , (int ( ::member_functions::protected_public_derived_t::* )( int ) )(&member_functions::protected_public_derived_t::pure_virtual_overloaded), (int ( protected_public_derived_t_wrapper::* )( int ) )(&protected_public_derived_t_wrapper::default_pure_virtual_overloaded)
                , ( bp::arg("x") )
                , bp::default_call_policies() );
        protected_public_derived_t_exposer.def( "pure_virtual_overloaded"
                , (int ( ::member_functions::protected_public_derived_t::* )( int,int ) )(&member_functions::protected_public_derived_t::pure_virtual_overloaded), (int ( protected_public_derived_t_wrapper::* )( int,int ) )(&protected_public_derived_t_wrapper::default_pure_virtual_overloaded)
                , ( bp::arg("x"), bp::arg("y") )
                , bp::default_call_policies() );
        protected_public_derived_t_exposer.def( "pure_virtual_const"
                , &member_functions::protected_public_derived_t::pure_virtual_const, &protected_public_derived_t_wrapper::default_pure_virtual_const
                , ( bp::arg("x") )
                , bp::default_call_policies() );
        protected_public_derived_t_exposer.def( "pure_virtual_const_overloaded"
                , (int ( ::member_functions::protected_public_derived_t::* )( int ) const)(&member_functions::protected_public_derived_t::pure_virtual_const_overloaded), (int ( protected_public_derived_t_wrapper::* )( int ) const)(&protected_public_derived_t_wrapper::default_pure_virtual_const_overloaded)
                , ( bp::arg("x") )
                , bp::default_call_policies() );
        protected_public_derived_t_exposer.def( "pure_virtual_const_overloaded"
                , (int ( ::member_functions::protected_public_derived_t::* )( int,int ) const)(&member_functions::protected_public_derived_t::pure_virtual_const_overloaded), (int ( protected_public_derived_t_wrapper::* )( int,int ) const)(&protected_public_derived_t_wrapper::default_pure_virtual_const_overloaded)
                , ( bp::arg("x"), bp::arg("y") )
                , bp::default_call_policies() );
    }

    if( true ){
        typedef bp::class_< protected_protected_derived_t_wrapper, bp::bases< member_functions::protected_base_t > > protected_protected_derived_t_exposer_t;
        protected_protected_derived_t_exposer_t protected_protected_derived_t_exposer = protected_protected_derived_t_exposer_t( "protected_protected_derived_t" );
        bp::scope protected_protected_derived_t_scope( protected_protected_derived_t_exposer );
        protected_protected_derived_t_exposer.def( "pure_virtual"
                , &member_functions::protected_protected_derived_t::pure_virtual, &protected_protected_derived_t_wrapper::default_pure_virtual
                , ( bp::arg("x") )
                , bp::default_call_policies() );
        protected_protected_derived_t_exposer.def( "pure_virtual_overloaded"
                , (int ( ::member_functions::protected_protected_derived_t::* )( int ) )(&member_functions::protected_protected_derived_t::pure_virtual_overloaded), (int ( protected_protected_derived_t_wrapper::* )( int ) )(&protected_protected_derived_t_wrapper::default_pure_virtual_overloaded)
                , ( bp::arg("x") )
                , bp::default_call_policies() );
        protected_protected_derived_t_exposer.def( "pure_virtual_overloaded"
                , (int ( ::member_functions::protected_protected_derived_t::* )( int,int ) )(&member_functions::protected_protected_derived_t::pure_virtual_overloaded), (int ( protected_protected_derived_t_wrapper::* )( int,int ) )(&protected_protected_derived_t_wrapper::default_pure_virtual_overloaded)
                , ( bp::arg("x"), bp::arg("y") )
                , bp::default_call_policies() );
        protected_protected_derived_t_exposer.def( "pure_virtual_const"
                , &member_functions::protected_protected_derived_t::pure_virtual_const, &protected_protected_derived_t_wrapper::default_pure_virtual_const
                , ( bp::arg("x") )
                , bp::default_call_policies() );
        protected_protected_derived_t_exposer.def( "pure_virtual_const_overloaded"
                , (int ( ::member_functions::protected_protected_derived_t::* )( int ) const)(&member_functions::protected_protected_derived_t::pure_virtual_const_overloaded), (int ( protected_protected_derived_t_wrapper::* )( int ) const)(&protected_protected_derived_t_wrapper::default_pure_virtual_const_overloaded)
                , ( bp::arg("x") )
                , bp::default_call_policies() );
        protected_protected_derived_t_exposer.def( "pure_virtual_const_overloaded"
                , (int ( ::member_functions::protected_protected_derived_t::* )( int,int ) const)(&member_functions::protected_protected_derived_t::pure_virtual_const_overloaded), (int ( protected_protected_derived_t_wrapper::* )( int,int ) const)(&protected_protected_derived_t_wrapper::default_pure_virtual_const_overloaded)
                , ( bp::arg("x"), bp::arg("y") )
                , bp::default_call_policies() );
    }

    if( true ){
        typedef bp::class_< public_base_t_wrapper, boost::noncopyable > public_base_t_exposer_t;
        public_base_t_exposer_t public_base_t_exposer = public_base_t_exposer_t( "public_base_t" );
        bp::scope public_base_t_scope( public_base_t_exposer );
        public_base_t_exposer.def( "regular"
                , &member_functions::public_base_t::regular
                , ( bp::arg("x") )
                , bp::default_call_policies() );
        public_base_t_exposer.def( "regular_overloaded"
                , (int ( ::member_functions::public_base_t::* )( int ) )(&member_functions::public_base_t::regular_overloaded)
                , ( bp::arg("x") )
                , bp::default_call_policies() );
        public_base_t_exposer.def( "regular_overloaded"
                , (int ( ::member_functions::public_base_t::* )( int,int ) )(&member_functions::public_base_t::regular_overloaded)
                , ( bp::arg("x"), bp::arg("y") )
                , bp::default_call_policies() );
        public_base_t_exposer.def( "regular_const"
                , &member_functions::public_base_t::regular_const
                , ( bp::arg("x") )
                , bp::default_call_policies() );
        public_base_t_exposer.def( "regular_const_overloaded"
                , (int ( ::member_functions::public_base_t::* )( int ) const)(&member_functions::public_base_t::regular_const_overloaded)
                , ( bp::arg("x") )
                , bp::default_call_policies() );
        public_base_t_exposer.def( "regular_const_overloaded"
                , (int ( ::member_functions::public_base_t::* )( int,int ) const)(&member_functions::public_base_t::regular_const_overloaded)
                , ( bp::arg("x"), bp::arg("y") )
                , bp::default_call_policies() );
        public_base_t_exposer.def( "virtual_"
                , &member_functions::public_base_t::virtual_, &public_base_t_wrapper::default_virtual_
                , ( bp::arg("x") )
                , bp::default_call_policies() );
        public_base_t_exposer.def( "virtual_overloaded"
                , (int ( ::member_functions::public_base_t::* )( int ) )(&member_functions::public_base_t::virtual_overloaded), (int ( public_base_t_wrapper::* )( int ) )(&public_base_t_wrapper::default_virtual_overloaded)
                , ( bp::arg("x") )
                , bp::default_call_policies() );
        public_base_t_exposer.def( "virtual_overloaded"
                , (int ( ::member_functions::public_base_t::* )( int,int ) )(&member_functions::public_base_t::virtual_overloaded), (int ( public_base_t_wrapper::* )( int,int ) )(&public_base_t_wrapper::default_virtual_overloaded)
                , ( bp::arg("x"), bp::arg("y") )
                , bp::default_call_policies() );
        public_base_t_exposer.def( "virtual_const"
                , &member_functions::public_base_t::virtual_const, &public_base_t_wrapper::default_virtual_const
                , ( bp::arg("x") )
                , bp::default_call_policies() );
        public_base_t_exposer.def( "virtual_const_overloaded"
                , (int ( ::member_functions::public_base_t::* )( int ) const)(&member_functions::public_base_t::virtual_const_overloaded), (int ( public_base_t_wrapper::* )( int ) const)(&public_base_t_wrapper::default_virtual_const_overloaded)
                , ( bp::arg("x") )
                , bp::default_call_policies() );
        public_base_t_exposer.def( "virtual_const_overloaded"
                , (int ( ::member_functions::public_base_t::* )( int,int ) const)(&member_functions::public_base_t::virtual_const_overloaded), (int ( public_base_t_wrapper::* )( int,int ) const)(&public_base_t_wrapper::default_virtual_const_overloaded)
                , ( bp::arg("x"), bp::arg("y") )
                , bp::default_call_policies() );
        public_base_t_exposer.def( "pure_virtual"
                , bp::pure_virtual( &::member_functions::public_base_t::pure_virtual )
                , ( bp::arg("x") )
                , bp::default_call_policies() );
        public_base_t_exposer.def( "pure_virtual_overloaded"
                , bp::pure_virtual( (int ( ::member_functions::public_base_t::* )( int ) )(&::member_functions::public_base_t::pure_virtual_overloaded) )
                , ( bp::arg("x") )
                , bp::default_call_policies() );
        public_base_t_exposer.def( "pure_virtual_overloaded"
                , bp::pure_virtual( (int ( ::member_functions::public_base_t::* )( int,int ) )(&::member_functions::public_base_t::pure_virtual_overloaded) )
                , ( bp::arg("x"), bp::arg("y") )
                , bp::default_call_policies() );
        public_base_t_exposer.def( "pure_virtual_const"
                , bp::pure_virtual( &::member_functions::public_base_t::pure_virtual_const )
                , ( bp::arg("x") )
                , bp::default_call_policies() );
        public_base_t_exposer.def( "pure_virtual_const_overloaded"
                , bp::pure_virtual( (int ( ::member_functions::public_base_t::* )( int ) const)(&::member_functions::public_base_t::pure_virtual_const_overloaded) )
                , ( bp::arg("x") )
                , bp::default_call_policies() );
        public_base_t_exposer.def( "pure_virtual_const_overloaded"
                , bp::pure_virtual( (int ( ::member_functions::public_base_t::* )( int,int ) const)(&::member_functions::public_base_t::pure_virtual_const_overloaded) )
                , ( bp::arg("x"), bp::arg("y") )
                , bp::default_call_policies() );
    }

    if( true ){
        typedef bp::class_< public_derived_t_wrapper, bp::bases< member_functions::public_base_t > > public_derived_t_exposer_t;
        public_derived_t_exposer_t public_derived_t_exposer = public_derived_t_exposer_t( "public_derived_t" );
        bp::scope public_derived_t_scope( public_derived_t_exposer );
        public_derived_t_exposer.def( "pure_virtual"
                , &member_functions::public_derived_t::pure_virtual, &public_derived_t_wrapper::default_pure_virtual
                , ( bp::arg("x") )
                , bp::default_call_policies() );
        public_derived_t_exposer.def( "pure_virtual_overloaded"
                , (int ( ::member_functions::public_derived_t::* )( int ) )(&member_functions::public_derived_t::pure_virtual_overloaded), (int ( public_derived_t_wrapper::* )( int ) )(&public_derived_t_wrapper::default_pure_virtual_overloaded)
                , ( bp::arg("x") )
                , bp::default_call_policies() );
        public_derived_t_exposer.def( "pure_virtual_overloaded"
                , (int ( ::member_functions::public_derived_t::* )( int,int ) )(&member_functions::public_derived_t::pure_virtual_overloaded), (int ( public_derived_t_wrapper::* )( int,int ) )(&public_derived_t_wrapper::default_pure_virtual_overloaded)
                , ( bp::arg("x"), bp::arg("y") )
                , bp::default_call_policies() );
        public_derived_t_exposer.def( "pure_virtual_const"
                , &member_functions::public_derived_t::pure_virtual_const, &public_derived_t_wrapper::default_pure_virtual_const
                , ( bp::arg("x") )
                , bp::default_call_policies() );
        public_derived_t_exposer.def( "pure_virtual_const_overloaded"
                , (int ( ::member_functions::public_derived_t::* )( int ) const)(&member_functions::public_derived_t::pure_virtual_const_overloaded), (int ( public_derived_t_wrapper::* )( int ) const)(&public_derived_t_wrapper::default_pure_virtual_const_overloaded)
                , ( bp::arg("x") )
                , bp::default_call_policies() );
        public_derived_t_exposer.def( "pure_virtual_const_overloaded"
                , (int ( ::member_functions::public_derived_t::* )( int,int ) const)(&member_functions::public_derived_t::pure_virtual_const_overloaded), (int ( public_derived_t_wrapper::* )( int,int ) const)(&public_derived_t_wrapper::default_pure_virtual_const_overloaded)
                , ( bp::arg("x"), bp::arg("y") )
                , bp::default_call_policies() );
    }

    if( true ){
        typedef bp::class_< private_derived_t_wrapper, bp::bases< member_functions::private_base_t > > private_derived_t_exposer_t;
        private_derived_t_exposer_t private_derived_t_exposer = private_derived_t_exposer_t( "private_derived_t" );
        bp::scope private_derived_t_scope( private_derived_t_exposer );
        private_derived_t_exposer.def( "pure_virtual"
                , &member_functions::private_derived_t::pure_virtual, &private_derived_t_wrapper::default_pure_virtual
                , ( bp::arg("x") )
                , bp::default_call_policies() );
        private_derived_t_exposer.def( "pure_virtual_overloaded"
                , (int ( ::member_functions::private_derived_t::* )( int ) )(&member_functions::private_derived_t::pure_virtual_overloaded), (int ( private_derived_t_wrapper::* )( int ) )(&private_derived_t_wrapper::default_pure_virtual_overloaded)
                , ( bp::arg("x") )
                , bp::default_call_policies() );
        private_derived_t_exposer.def( "pure_virtual_overloaded"
                , (int ( ::member_functions::private_derived_t::* )( int,int ) )(&member_functions::private_derived_t::pure_virtual_overloaded), (int ( private_derived_t_wrapper::* )( int,int ) )(&private_derived_t_wrapper::default_pure_virtual_overloaded)
                , ( bp::arg("x"), bp::arg("y") )
                , bp::default_call_policies() );
        private_derived_t_exposer.def( "pure_virtual_const"
                , &member_functions::private_derived_t::pure_virtual_const, &private_derived_t_wrapper::default_pure_virtual_const
                , ( bp::arg("x") )
                , bp::default_call_policies() );
        private_derived_t_exposer.def( "pure_virtual_const_overloaded"
                , (int ( ::member_functions::private_derived_t::* )( int ) const)(&member_functions::private_derived_t::pure_virtual_const_overloaded), (int ( private_derived_t_wrapper::* )( int ) const)(&private_derived_t_wrapper::default_pure_virtual_const_overloaded)
                , ( bp::arg("x") )
                , bp::default_call_policies() );
        private_derived_t_exposer.def( "pure_virtual_const_overloaded"
                , (int ( ::member_functions::private_derived_t::* )( int,int ) const)(&member_functions::private_derived_t::pure_virtual_const_overloaded), (int ( private_derived_t_wrapper::* )( int,int ) const)(&private_derived_t_wrapper::default_pure_virtual_const_overloaded)
                , ( bp::arg("x"), bp::arg("y") )
                , bp::default_call_policies() );
    }
}
