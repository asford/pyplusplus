// This file has been generated by pyplusplus.

// Copyright 2004 Roman Yakovenko.
// Distributed under the Boost Software License, Version 1.0. (See
// accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#include "boost/python.hpp"
#ifdef _MSC_VER
    #pragma hdrstop
#endif //_MSC_VER

#include "unittests/data/abstract_to_be_exported.hpp"

namespace bp = boost::python;

struct shape_wrapper : abstract::shape, bp::wrapper< abstract::shape > {

    shape_wrapper( )
    : abstract::shape( )
      , bp::wrapper< abstract::shape >()
    {}

    virtual ::abstract::colors color(  ) const {
        bp::override color = this->get_override( "color" );
        return color(  );
    }

};

struct square_wrapper : abstract::square, bp::wrapper< abstract::square > {

    square_wrapper(abstract::square const & arg )
    : abstract::square( arg )
      , bp::wrapper< abstract::square >()
    {}

    square_wrapper()
    : abstract::square()
      , bp::wrapper< abstract::square >()
    {}

    virtual ::abstract::colors color(  ) const {
        if( bp::override color = this->get_override( "color" ) )
            return color(  );
        else
            return abstract::square::color(  );
    }
    
    virtual ::abstract::colors default_color(  ) const {
        return this->abstract::square::color( );
    }

};

BOOST_PYTHON_MODULE(abstract){
    bp::enum_<abstract::colors>("colors")
        .value("blue", abstract::blue)
        .value("green", abstract::green)
        .value("red", abstract::red)
        .export_values()
        ;

    bp::class_< shape_wrapper, boost::noncopyable >( "shape" )    
        .def( bp::init< >()[bp::default_call_policies()] )    
        .def( "color"
                , bp::pure_virtual( &::abstract::shape::color )
                , bp::default_call_policies() );

    bp::class_< square_wrapper, bp::bases< abstract::shape > >( "square" )    
        .def( "color"
                , &abstract::square::color, &square_wrapper::default_color
                , bp::default_call_policies() );

    bp::def( "call"
            , &abstract::call
            , ( bp::arg("s") )
            , bp::default_call_policies() );
}
