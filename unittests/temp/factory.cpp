// This file has been generated by pyplusplus.

// Copyright 2004 Roman Yakovenko.
// Distributed under the Boost Software License, Version 1.0. (See
// accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#include "boost/python.hpp"
#ifdef _MSC_VER
    #pragma hdrstop
#endif //_MSC_VER

#include "unittests/data/factory_to_be_exported.hpp"

namespace bp = boost::python;

struct abstract_wrapper : factory::abstract, bp::wrapper< factory::abstract > {

    abstract_wrapper()
    : factory::abstract()
      , bp::wrapper< factory::abstract >()
    {}

    virtual int run(  ) const {
        bp::override run = this->get_override( "run" );
        return run(  );
    }

};

BOOST_PYTHON_MODULE(factory){
    if( true ){
        typedef bp::class_< abstract_wrapper, boost::noncopyable > abstract_exposer_t;
        abstract_exposer_t abstract_exposer = abstract_exposer_t( "abstract" );
        bp::scope abstract_scope( abstract_exposer );
        abstract_exposer.def( "run"
                , bp::pure_virtual( &::factory::abstract::run )
                , bp::default_call_policies() );
        bp::register_ptr_to_python< std::auto_ptr< factory::abstract > >();
    }

    bp::def( "create"
            , &factory::create
            , bp::default_call_policies() );
}
