// This file has been generated by pyplusplus.

// Copyright 2004 Roman Yakovenko.
// Distributed under the Boost Software License, Version 1.0. (See
// accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#include "boost/python.hpp"
#ifdef _MSC_VER
    #pragma hdrstop
#endif //_MSC_VER

#include "__array_1.pypp.hpp"

#include "unittests/data/global_variables_to_be_exported.hpp"

namespace bp = boost::python;

namespace global_variables{ 
pyplusplus::containers::static_sized::array_1_t< ::global_variables::data, 10 >
garray_wrapper(){
    return pyplusplus::containers::static_sized::array_1_t< ::global_variables::data, 10 >( ::global_variables::garray );
}
}

BOOST_PYTHON_MODULE(global_variables){
    bp::enum_<global_variables::color>("color")
        .value("blue", global_variables::blue)
        .value("green", global_variables::green)
        .value("red", global_variables::red)
        .export_values()
        ;

    bp::class_< global_variables::data >( "data" )    
        .def_readwrite( "value", &global_variables::data::value );

    bp::def( "init_garray"
            , &global_variables::init_garray
            , bp::default_call_policies() );

    pyplusplus::containers::static_sized::register_array_1< ::global_variables::data, 10, bp::return_internal_reference< 1, bp::default_call_policies > >( "__array_1__scope_global_variables_scope_data_10" );

    bp::scope().attr("garray") = global_variables::garray_wrapper();

    bp::scope().attr("NonConstVar") = global_variables::non_const_var;

    bp::scope().attr("const_var") = global_variables::const_var;
}
