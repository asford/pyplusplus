// This file has been generated by pyplusplus.

// Copyright 2004 Roman Yakovenko.
// Distributed under the Boost Software License, Version 1.0. (See
// accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#include "boost/python.hpp"
#ifdef _MSC_VER
    #pragma hdrstop
#endif //_MSC_VER

#include "unittests/data/internal_classes_to_be_exported.hpp"

namespace bp = boost::python;

struct external_t_wrapper : internal_classes::external_t, bp::wrapper< internal_classes::external_t > {

    external_t_wrapper(internal_classes::external_t const & arg )
    : internal_classes::external_t( arg )
      , bp::wrapper< internal_classes::external_t >()
    {}

    external_t_wrapper()
    : internal_classes::external_t()
      , bp::wrapper< internal_classes::external_t >()
    {}

    struct internal_t_wrapper : internal_classes::external_t::internal_t, bp::wrapper< internal_classes::external_t::internal_t > {
    
        internal_t_wrapper(internal_classes::external_t::internal_t const & arg )
        : internal_classes::external_t::internal_t( arg )
          , bp::wrapper< internal_classes::external_t::internal_t >()
        {}
    
        internal_t_wrapper()
        : internal_classes::external_t::internal_t()
          , bp::wrapper< internal_classes::external_t::internal_t >()
        {}
    
        virtual int do_nothing(  ) const {
            if( bp::override do_nothing = this->get_override( "do_nothing" ) )
                return do_nothing(  );
            else
                return internal_classes::external_t::internal_t::do_nothing(  );
        }
        
        virtual int default_do_nothing(  ) const {
            return this->internal_classes::external_t::internal_t::do_nothing( );
        }
    
    };

};

BOOST_PYTHON_MODULE(internal_classes){
    if( true ){
        typedef bp::class_< external_t_wrapper > external_t_exposer_t;
        external_t_exposer_t external_t_exposer = external_t_exposer_t( "external_t" );
        bp::scope external_t_scope( external_t_exposer );
        bp::class_< external_t_wrapper::internal_t_wrapper >( "internal_t" )    
            .def( "do_nothing"
                    , &internal_classes::external_t::internal_t::do_nothing, &external_t_wrapper::internal_t_wrapper::default_do_nothing
                    , bp::default_call_policies() );
    }
}
