// This file has been generated by pyplusplus.

// Copyright 2004 Roman Yakovenko.
// Distributed under the Boost Software License, Version 1.0. (See
// accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#include "boost/python.hpp"
#ifdef _MSC_VER
    #pragma hdrstop
#endif //_MSC_VER

#include "unittests/data/smart_pointers_to_be_exported.hpp"

namespace bp = boost::python;

struct base_wrapper : smart_pointers::base, bp::wrapper< smart_pointers::base > {

    base_wrapper(smart_pointers::base const & arg )
    : smart_pointers::base( arg )
      , bp::wrapper< smart_pointers::base >()
    {}

    base_wrapper( )
    : smart_pointers::base( )
      , bp::wrapper< smart_pointers::base >()
    {}

    virtual int get_base_value(  ){
        if( bp::override get_base_value = this->get_override( "get_base_value" ) )
            return get_base_value(  );
        else
            return smart_pointers::base::get_base_value(  );
    }
    
    virtual int default_get_base_value(  ){
        return this->smart_pointers::base::get_base_value( );
    }

};

struct data_wrapper : smart_pointers::data, bp::wrapper< smart_pointers::data > {

    data_wrapper(smart_pointers::data const & arg )
    : smart_pointers::data( arg )
      , bp::wrapper< smart_pointers::data >()
    {}

    data_wrapper( )
    : smart_pointers::data( )
      , bp::wrapper< smart_pointers::data >()
    {}

    virtual int get_value(  ){
        if( bp::override get_value = this->get_override( "get_value" ) )
            return get_value(  );
        else
            return smart_pointers::data::get_value(  );
    }
    
    virtual int default_get_value(  ){
        return this->smart_pointers::data::get_value( );
    }

};

BOOST_PYTHON_MODULE(smart_pointers){
    if( true ){
        typedef bp::class_< base_wrapper, boost::shared_ptr< smart_pointers::base > > base_exposer_t;
        base_exposer_t base_exposer = base_exposer_t( "base" );
        bp::scope base_scope( base_exposer );
        base_exposer.def( bp::init< >()[bp::default_call_policies()] );
        base_exposer.def( "get_base_value"
                , &smart_pointers::base::get_base_value, &base_wrapper::default_get_base_value
                , bp::default_call_policies() );
        base_exposer.def_readwrite( "base_value", &smart_pointers::base::base_value );
        
        bp::register_ptr_to_python< std::auto_ptr< smart_pointers::base > >();
    }

    if( true ){
        typedef bp::class_< data_wrapper, bp::bases< smart_pointers::base >, boost::shared_ptr< smart_pointers::data > > data_exposer_t;
        data_exposer_t data_exposer = data_exposer_t( "data" );
        bp::scope data_scope( data_exposer );
        data_exposer.def( bp::init< >()[bp::default_call_policies()] );
        data_exposer.def( "get_value"
                , &smart_pointers::data::get_value, &data_wrapper::default_get_value
                , bp::default_call_policies() );
        data_exposer.def_readwrite( "value", &smart_pointers::data::value );
        
        bp::implicitly_convertible< boost::shared_ptr< smart_pointers::data >, boost::shared_ptr< smart_pointers::base > >();
        bp::register_ptr_to_python< std::auto_ptr< smart_pointers::data > >();
        bp::implicitly_convertible< std::auto_ptr< smart_pointers::data >, std::auto_ptr< smart_pointers::base > >();
    }

    bp::def( "const_ref_shared_base_value"
            , &smart_pointers::const_ref_shared_base_value
            , ( bp::arg("arg0") )
            , bp::default_call_policies() );

    bp::def( "const_ref_auto_base_value"
            , &smart_pointers::const_ref_auto_base_value
            , ( bp::arg("arg0") )
            , bp::default_call_policies() );

    bp::def( "val_shared_base_value"
            , &smart_pointers::val_shared_base_value
            , ( bp::arg("arg0") )
            , bp::default_call_policies() );

    bp::def( "val_auto_base_value"
            , &smart_pointers::val_auto_base_value
            , ( bp::arg("arg0") )
            , bp::default_call_policies() );

    bp::def( "ref_shared_base_value"
            , &smart_pointers::ref_shared_base_value
            , ( bp::arg("arg0") )
            , bp::default_call_policies() );

    bp::def( "ref_auto_base_value"
            , &smart_pointers::ref_auto_base_value
            , ( bp::arg("arg0") )
            , bp::default_call_policies() );

    bp::def( "const_ref_shared"
            , &smart_pointers::const_ref_shared
            , ( bp::arg("arg0") )
            , bp::default_call_policies() );

    bp::def( "const_ref_auto"
            , &smart_pointers::const_ref_auto
            , ( bp::arg("arg0") )
            , bp::default_call_policies() );

    bp::def( "val_shared"
            , &smart_pointers::val_shared
            , ( bp::arg("arg0") )
            , bp::default_call_policies() );

    bp::def( "val_auto"
            , &smart_pointers::val_auto
            , ( bp::arg("arg0") )
            , bp::default_call_policies() );

    bp::def( "ref_shared"
            , &smart_pointers::ref_shared
            , ( bp::arg("arg0") )
            , bp::default_call_policies() );

    bp::def( "ref_auto"
            , &smart_pointers::ref_auto
            , ( bp::arg("arg0") )
            , bp::default_call_policies() );

    bp::def( "create_shared"
            , &smart_pointers::create_shared
            , bp::default_call_policies() );

    bp::def( "create_auto"
            , &smart_pointers::create_auto
            , bp::default_call_policies() );
}
