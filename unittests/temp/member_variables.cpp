// This file has been generated by pyplusplus.

// Copyright 2004 Roman Yakovenko.
// Distributed under the Boost Software License, Version 1.0. (See
// accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#include "boost/python.hpp"
#ifdef _MSC_VER
    #pragma hdrstop
#endif //_MSC_VER

#include "__array_1.pypp.hpp"

#include "unittests/data/member_variables_to_be_exported.hpp"

namespace bp = boost::python;

struct array_t_wrapper : member_variables::array_t, bp::wrapper< member_variables::array_t > {

    array_t_wrapper(member_variables::array_t const & arg )
    : member_variables::array_t( arg )
      , bp::wrapper< member_variables::array_t >()
    {}

    array_t_wrapper( )
    : member_variables::array_t( )
      , bp::wrapper< member_variables::array_t >()
    {}

    pyplusplus::containers::static_sized::const_array_1_t< ::member_variables::array_t::variable_t, 3 >
    pyplusplus_vars_wrapper(){
        return pyplusplus::containers::static_sized::const_array_1_t< ::member_variables::array_t::variable_t, 3 >( vars );
    }

    pyplusplus::containers::static_sized::array_1_t< int, 10 >
    pyplusplus_ivars_wrapper(){
        return pyplusplus::containers::static_sized::array_1_t< int, 10 >( ivars );
    }

    pyplusplus::containers::static_sized::array_1_t< int, 10 >
    pyplusplus_ivars2_wrapper(){
        return pyplusplus::containers::static_sized::array_1_t< int, 10 >( ivars2 );
    }

};

struct bit_fields_t_wrapper : member_variables::bit_fields_t, bp::wrapper< member_variables::bit_fields_t > {

    bit_fields_t_wrapper(member_variables::bit_fields_t const & arg )
    : member_variables::bit_fields_t( arg )
      , bp::wrapper< member_variables::bit_fields_t >()
    {}

    bit_fields_t_wrapper( )
    : member_variables::bit_fields_t( )
      , bp::wrapper< member_variables::bit_fields_t >()
    {}

    unsigned int get_a() const {
        return a;
    }
    
    void set_a( unsigned int new_value ){ 
        a = new_value;
    }

    unsigned int const get_b() const {
        return b;
    }

};

struct tree_node_t_wrapper : member_variables::pointers::tree_node_t, bp::wrapper< member_variables::pointers::tree_node_t > {

    tree_node_t_wrapper(member_variables::pointers::tree_node_t const & arg )
    : member_variables::pointers::tree_node_t( arg )
      , bp::wrapper< member_variables::pointers::tree_node_t >()
    {}

    tree_node_t_wrapper(::member_variables::pointers::tree_node_t const * parent=0 )
    : member_variables::pointers::tree_node_t( parent )
      , bp::wrapper< member_variables::pointers::tree_node_t >()
    {}

    static ::member_variables::pointers::data_t * get_data(member_variables::pointers::tree_node_t const & inst ){
        return inst.data;
    }
    
    static void set_data( member_variables::pointers::tree_node_t & inst, ::member_variables::pointers::data_t * new_value ){ 
        inst.data = new_value;
    }

    static ::member_variables::pointers::tree_node_t * get_left(member_variables::pointers::tree_node_t const & inst ){
        return inst.left;
    }
    
    static void set_left( member_variables::pointers::tree_node_t & inst, ::member_variables::pointers::tree_node_t * new_value ){ 
        inst.left = new_value;
    }

    static ::member_variables::pointers::tree_node_t * get_right(member_variables::pointers::tree_node_t const & inst ){
        return inst.right;
    }
    
    static void set_right( member_variables::pointers::tree_node_t & inst, ::member_variables::pointers::tree_node_t * new_value ){ 
        inst.right = new_value;
    }

    static ::member_variables::pointers::tree_node_t const * get_parent(member_variables::pointers::tree_node_t const & inst ){
        return inst.parent;
    }

};

BOOST_PYTHON_MODULE(member_variables){
    if( true ){
        typedef bp::class_< array_t_wrapper > array_t_exposer_t;
        array_t_exposer_t array_t_exposer = array_t_exposer_t( "array_t" );
        bp::scope array_t_scope( array_t_exposer );
        bp::class_< member_variables::array_t::variable_t >( "variable_t" )    
            .def( bp::init< >()[bp::default_call_policies()] )    
            .def_readwrite( "value", &member_variables::array_t::variable_t::value );
        array_t_exposer.def( bp::init< >()[bp::default_call_policies()] );
        array_t_exposer.def( "get_ivars_item"
                , &member_variables::array_t::get_ivars_item
                , ( bp::arg("index") )
                , bp::default_call_policies() );
        pyplusplus::containers::static_sized::register_const_array_1< ::member_variables::array_t::variable_t, 3, bp::return_internal_reference< 1, bp::default_call_policies > >( "__array_1__scope_member_variables_scope_array_t_scope_variable_t_3" );
        array_t_exposer.add_property( "vars"
            , bp::make_function( (pyplusplus::containers::static_sized::const_array_1_t< ::member_variables::array_t::variable_t, 3 > ( array_t_wrapper::* )(  ) )(&array_t_wrapper::pyplusplus_vars_wrapper)
                        , bp::with_custodian_and_ward_postcall< 0, 1, bp::default_call_policies >() ) );;
        pyplusplus::containers::static_sized::register_array_1< int, 10, bp::default_call_policies >( "__array_1_int_10" );
        array_t_exposer.add_property( "ivars"
            , bp::make_function( (pyplusplus::containers::static_sized::array_1_t< int, 10 > ( array_t_wrapper::* )(  ) )(&array_t_wrapper::pyplusplus_ivars_wrapper)
                        , bp::with_custodian_and_ward_postcall< 0, 1, bp::default_call_policies >() ) );;
        array_t_exposer.add_property( "ivars2"
            , bp::make_function( (pyplusplus::containers::static_sized::array_1_t< int, 10 > ( array_t_wrapper::* )(  ) )(&array_t_wrapper::pyplusplus_ivars2_wrapper)
                        , bp::with_custodian_and_ward_postcall< 0, 1, bp::default_call_policies >() ) );;
    }

    if( true ){
        typedef bp::class_< member_variables::point > point_exposer_t;
        point_exposer_t point_exposer = point_exposer_t( "point" );
        bp::scope point_scope( point_exposer );
        bp::enum_<member_variables::point::color>("color")
            .value("blue", member_variables::point::blue)
            .value("green", member_variables::point::green)
            .value("red", member_variables::point::red)
            .export_values()
            ;
        point_exposer.def( bp::init< >()[bp::default_call_policies()] );
        point_exposer.def_readwrite( "x", &member_variables::point::x );
        point_exposer.def_readwrite( "y", &member_variables::point::y );
        point_exposer.def_readonly( "PreferedColor", &member_variables::point::prefered_color );
        point_exposer.def_readwrite( "instance_count", member_variables::point::instance_count );
        point_exposer.def_readonly( "default_color", member_variables::point::default_color );
    }

    bp::class_< member_variables::pointers::data_t >( "data_t" )    
        .def( bp::init< >()[bp::default_call_policies()] )    
        .def_readwrite( "value", &member_variables::pointers::data_t::value );

    bp::class_< bit_fields_t_wrapper >( "bit_fields_t" )    
        .def( bp::init< >()[bp::default_call_policies()] )    
        .add_property( "a"
                    , (unsigned int ( bit_fields_t_wrapper::* )(  ) const)(&bit_fields_t_wrapper::get_a)
                    , (void ( bit_fields_t_wrapper::* )( unsigned int ) )(&bit_fields_t_wrapper::set_a) )    
        .add_property( "b"
                    , (unsigned int const ( bit_fields_t_wrapper::* )(  ) const)(&bit_fields_t_wrapper::get_b) );

    if( true ){
        typedef bp::class_< tree_node_t_wrapper > tree_node_t_exposer_t;
        tree_node_t_exposer_t tree_node_t_exposer = tree_node_t_exposer_t( "tree_node_t", bp::init< bp::optional< member_variables::pointers::tree_node_t const * > >(( bp::arg("parent")=bp::object() )) );
        bp::scope tree_node_t_scope( tree_node_t_exposer );
        tree_node_t_exposer.add_property( "data"
                    , bp::make_function( (::member_variables::pointers::data_t * (*)( ::member_variables::pointers::tree_node_t const & ))(&tree_node_t_wrapper::get_data), bp::return_value_policy< bp::reference_existing_object, bp::default_call_policies >() ) );
        tree_node_t_exposer.add_property( "left"
                    , bp::make_function( (::member_variables::pointers::tree_node_t * (*)( ::member_variables::pointers::tree_node_t const & ))(&tree_node_t_wrapper::get_left), bp::return_value_policy< bp::reference_existing_object, bp::default_call_policies >() ) );
        tree_node_t_exposer.add_property( "right"
                    , bp::make_function( (::member_variables::pointers::tree_node_t * (*)( ::member_variables::pointers::tree_node_t const & ))(&tree_node_t_wrapper::get_right), bp::return_value_policy< bp::reference_existing_object, bp::default_call_policies >() ) );
        tree_node_t_exposer.add_property( "parent"
                    , bp::make_function( (::member_variables::pointers::tree_node_t const * (*)( ::member_variables::pointers::tree_node_t const & ))(&tree_node_t_wrapper::get_parent), bp::return_value_policy< bp::reference_existing_object, bp::default_call_policies >() ) );
        bp::register_ptr_to_python< std::auto_ptr< member_variables::pointers::tree_node_t > >();
    }

    bp::implicitly_convertible< member_variables::pointers::tree_node_t const *, member_variables::pointers::tree_node_t >();

    bp::def( "get_b"
            , &member_variables::get_b
            , ( bp::arg("arg0") )
            , bp::default_call_policies() );

    bp::def( "set_a"
            , &member_variables::set_a
            , ( bp::arg("arg0"), bp::arg("arg1") )
            , bp::default_call_policies() );

    bp::def( "get_a"
            , &member_variables::get_a
            , ( bp::arg("arg0") )
            , bp::default_call_policies() );

    bp::def( "create_tree"
            , &member_variables::pointers::create_tree
            , bp::default_call_policies() );
}
