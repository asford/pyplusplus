// This file has been generated by pyplusplus.

// Copyright 2004 Roman Yakovenko.
// Distributed under the Boost Software License, Version 1.0. (See
// accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

// std directories: ['d:\\boost_cvs', 'c:\\python\\include']
// user defined directories: ['d:\\pygccxml_sources\\source\\pyplusplus']

#include "boost/python.hpp"
#ifdef _MSC_VER
    #pragma hdrstop
#endif //_MSC_VER

#include "unittests/data/smart_pointers_identity_to_be_exported.hpp"

namespace bp = boost::python;

BOOST_PYTHON_MODULE(smart_pointers_identity){
    if( true ){
        typedef bp::class_< smart_pointers_identity::data, boost::shared_ptr<smart_pointers_identity::data> > data_exposer_t;
        data_exposer_t data_exposer = data_exposer_t( "data" );
        bp::scope data_scope( data_exposer );
        data_exposer.def( bp::init< >()[bp::default_call_policies()] );
        data_exposer.def( bp::init< int >(( bp::arg("i") ))[bp::default_call_policies()] );
        data_exposer.def_readwrite( "value", &smart_pointers_identity::data::value );
        bp::register_ptr_to_python< boost::shared_ptr< smart_pointers_identity::data > >();
    }

    bp::implicitly_convertible< int, smart_pointers_identity::data >();

    bp::def( "get_data"
            , &smart_pointers_identity::get_data
            , bp::return_value_policy< bp::reference_existing_object, bp::default_call_policies >() );
}
