// This file has been generated by pyplusplus.

// Copyright 2004 Roman Yakovenko.
// Distributed under the Boost Software License, Version 1.0. (See
// accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#include "boost/python.hpp"
#ifdef _MSC_VER
    #pragma hdrstop
#endif //_MSC_VER

#include "unittests/data/finalizables_to_be_exported.hpp"

namespace bp = boost::python;

struct whole_class_t_wrapper : finalizables::whole_class_t, bp::wrapper< finalizables::whole_class_t > {

    whole_class_t_wrapper(finalizables::whole_class_t const & arg )
    : finalizables::whole_class_t( arg )
      , bp::wrapper< finalizables::whole_class_t >()
    {}

    whole_class_t_wrapper()
    : finalizables::whole_class_t()
      , bp::wrapper< finalizables::whole_class_t >()
    {}

    virtual int month(  ){
        if( bp::override month = this->get_override( "month" ) )
            return month(  );
        else
            return finalizables::whole_class_t::month(  );
    }
    
    virtual int default_month(  ){
        return this->finalizables::whole_class_t::month( );
    }

    virtual int day(  ){
        if( bp::override day = this->get_override( "day" ) )
            return day(  );
        else
            return finalizables::whole_class_t::day(  );
    }
    
    virtual int default_day(  ){
        return this->finalizables::whole_class_t::day( );
    }

    virtual void do_smth(  ){
        this->finalizables::whole_class_t::do_smth( );
    }

};

struct function_t_wrapper : finalizables::function_t, bp::wrapper< finalizables::function_t > {

    function_t_wrapper(finalizables::function_t const & arg )
    : finalizables::function_t( arg )
      , bp::wrapper< finalizables::function_t >()
    {}

    function_t_wrapper()
    : finalizables::function_t()
      , bp::wrapper< finalizables::function_t >()
    {}

    virtual int year(  ){
        if( bp::override year = this->get_override( "year" ) )
            return year(  );
        else
            return finalizables::function_t::year(  );
    }
    
    virtual int default_year(  ){
        return this->finalizables::function_t::year( );
    }

};

BOOST_PYTHON_MODULE(finalizables){
    bp::class_< whole_class_t_wrapper >( "whole_class_t" )    
        .def( "month"
                , &finalizables::whole_class_t::month, &whole_class_t_wrapper::default_month
                , bp::default_call_policies() )    
        .def( "day"
                , &finalizables::whole_class_t::day, &whole_class_t_wrapper::default_day
                , bp::default_call_policies() )    
        .def( "do_smth"
                , &whole_class_t_wrapper::do_smth
                , bp::default_call_policies() );

    bp::class_< function_t_wrapper >( "function_t" )    
        .def( "year"
                , &finalizables::function_t::year, &function_t_wrapper::default_year
                , bp::default_call_policies() );
}
