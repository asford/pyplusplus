// This file has been generated by pyplusplus.

// Copyright 2004 Roman Yakovenko.
// Distributed under the Boost Software License, Version 1.0. (See
// accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#include "boost/python.hpp"
#ifdef _MSC_VER
    #pragma hdrstop
#endif //_MSC_VER

#include "boost/operators.hpp"

#include "c:/tools/gcc_xml/share/gccxml-0.6/vc71/include/xlocale"

#include "boost/rational.hpp"

namespace bp = boost::python;

BOOST_PYTHON_MODULE(operators){
    bp::class_< boost::rational<long int> >( "pyrational" )    
        .def( bp::init< >()[bp::default_call_policies()] )    
        .def( bp::init< long int >(( bp::arg("n") ))[bp::default_call_policies()] )    
        .def( bp::init< long int, long int >(( bp::arg("n"), bp::arg("d") ))[bp::default_call_policies()] )    
        .def( "assign"
                , &boost::rational<long int>::assign
                , ( bp::arg("n"), bp::arg("d") )
                , bp::return_self< bp::default_call_policies >() )    
        .def( "numerator"
                , &boost::rational<long int>::numerator
                , bp::default_call_policies() )    
        .def( "denominator"
                , &boost::rational<long int>::denominator
                , bp::default_call_policies() )    
        .def( bp::self += bp::self )    
        .def( bp::self -= bp::self )    
        .def( bp::self *= bp::self )    
        .def( bp::self /= bp::self )    
        .def( bp::self += bp::other< long int >() )    
        .def( bp::self -= bp::other< long int >() )    
        .def( bp::self *= bp::other< long int >() )    
        .def( bp::self /= bp::other< long int >() )    
        .def( !bp::self )    
        .def( bp::self < bp::self )    
        .def( bp::self == bp::self )    
        .def( bp::self < bp::other< long int >() )    
        .def( bp::self > bp::other< long int >() )    
        .def( bp::self == bp::other< long int >() )    
        .def( bp::self >= bp::self )    
        .def( bp::self <= bp::self )    
        .def( bp::self > bp::self )    
        .def( bp::self != bp::self )    
        .def( bp::other< long int >() >= bp::self )    
        .def( bp::other< long int >() <= bp::self )    
        .def( bp::other< long int >() < bp::self )    
        .def( bp::other< long int >() > bp::self )    
        .def( bp::self >= bp::other< long int >() )    
        .def( bp::self <= bp::other< long int >() )    
        .def( bp::self != bp::other< long int >() )    
        .def( bp::other< long int >() != bp::self )    
        .def( bp::other< long int >() == bp::self )    
        .def( bp::self + bp::self )    
        .def( bp::self - bp::self )    
        .def( bp::self * bp::self )    
        .def( bp::self / bp::self )    
        .def( bp::other< long int >() + bp::self )    
        .def( bp::self + bp::other< long int >() )    
        .def( bp::self - bp::other< long int >() )    
        .def( bp::other< long int >() - bp::self )    
        .def( bp::other< long int >() * bp::self )    
        .def( bp::self * bp::other< long int >() )    
        .def( bp::self / bp::other< long int >() )    
        .def( bp::other< long int >() / bp::self );

    bp::implicitly_convertible< long int const, boost::rational<long int> >();

    bp::class_< boost::bad_rational >( "bad_rational" )    
        .def( bp::init< >()[bp::default_call_policies()] );
}
