========================
Py++ development history
========================

.. contents:: Table of contents

------------
Contributors
------------

Thanks to all the people that have contributed patches, bug reports and suggestions:

  * My wife - Yulia
  * John Pallister
  * Matthias Baas
  * Allen Bierbaum
  * Lakin Wecker
  * Georgiy Dernovoy
  * Gottfried Ganssauge

------------
Project name
------------

In version 0.8.1 project has been renamed from "pyplusplus" to "Py++".
There were few reasons to this:

1. I like "Py++" more then "pyplusplus".

2. "Py++" was the original name of the project: http://mail.python.org/pipermail/c++-sig/2005-July/009280.html

3. Users always changed the name of the projects. I saw at least 6 different names.


-------------
Version 0.8.*
-------------

1. Performance improvments. In some cases you can get x10 performance boost.
   Many thanks to Allen Bierbaum!

2. Convinience API for registering exception translator was introduced.

3. `Py++`_ can generate code that uses ``BOOST_PYTHON_FUNCTION_OVERLOADS`` and
   ``BOOST_PYTHON_MEMBER_FUNCTION_OVERLOADS`` macros.

4. Treatment to previously generated and no more in-use files was added. By
   default `Py++`_ will delete these files, but of course you can redefine this
   behaviour.

-------------
Version 0.8.1
-------------

1. Georgiy Dernovoy contributed a patch, which allows `Py++`_ GUI to
   save\\load last used header file.

2. `Py++`_ improved a lot functionality related to providing feedback to user:

   * every package has its own logger
   * only important user messages are written to ``stdout``
   * user messages are clear

3. Support for Boost.Python indexing suite version 2 was implemented.

4. Every code creator class took ``parent`` argument in ``__init__`` method.
   This argument was removed. ``adopt_creator`` and ``remove_creator`` will
   set\unset reference to parent.

5. Generated code for member and free functions was changed. This changed was
   introduced to fix compilation errors on msvc 7.1 compiler.

6. `Py++`_ generates "stable" code. If header files were not changed,
   `Py++`_ will not change any file.

7. Support for huge classes was added. `Py++`_ is able to split registration
   code for the class to multiple cpp files.

8. User code could be added almost anywhere, without use of low level API.

9. Generated source files include only header files you passes as an argument
   to module builder.

10. Bug fixes.

11. Documentation was improved..

-------------
Version 0.8.0
-------------

1. `Py++`_ "user guide" functionality has been improved. Now `Py++`_
   can answer few questions:

   * why this declaration could not be exported

   * why this function could not be overridden from Python

2. `Py++`_ can suggest an alias for exported classes.

3. Small redesign has been done - now it is much easier to understand and
   maintain code creators, which creates code for C++ functions.

4. Exception specification is taken into account, when `Py++`_ exports
   member functions.

5. Member variables, that are pointers exported correctly.

6. Adding experimental support for ``vector_indexing_suite``.

7. Bug fixes.

-------------
Version 0.7.0
-------------

Many thanks to *Matthias Baas* and *Allen Bierbaum*! They contributed so much to
Py++, especially Matthias:

    * New high-level API: `Py++`_ has simple and powerful API

    * Documentation: Matthias and Allen added a lot of documentation strings

    * Bug fixes and performance improvements

1. New GUI features:

    * It is possible now to see XML generated by GCC-XML.

    * It is possible to use GUI as wizard. It will help you to start  with
      `Py++`_, by generating `Py++`_ code.

2. **Attention - non backward compatible change**.

   ``module_creator.creator_t.__init__`` method has been changed. ``decls``
   argument could be interpreted as

   * list of all declaration to be exported

   * list of top-level declarations. ``creator_t`` should export all
     declarations recursively.

   In order to clarify the use of ``decls`` argument new argument ``recursive``
   has been added. By default new value of ``recursive`` is ``False``.

   Guide for users/upgraders: if use are exporting all declaration without
   filtering, you should set ``recursive`` argument to ``True``. If you use
   ``pygccxml.declarations.filtering.*`` functions, you have nothing to do.

   Sorry for the inconvenience :-(.

3. Better split of extension module to files. From now next declarations will
   have dedicated file:

   * named enumerations, defined within namespace
   * unnamed enumerations and global variables
   * free functions

   This functionality will keep the number of instantiated templates within
   one file, ``main.cpp``, to be very low. Also it is possible to implement
   solution, where ``main.cpp`` file does not contain templates instantiations
   at all.

4. Only constant casting operators could be used with ``implicitly_convertible``.
   This bug has been fixed.

5. Bug exporting non copyable class has been fixed.

6. Small bug fix - from now file with identical content will not be overwritten.

7. Boost.Python ``optional`` is now supported and used when a constructor has a
   a default argument.

8. `Py++`_ now generates correct code for hierarchy of abstract classes:
   ::

     struct abstract1{
         virtual void do_smth() = 0;
     }

     struct abstract2 : public abstract1{
         virtual void do_smth_else() = 0;
     }

     struct concrete : public abstract2{
         virtual void do_smth(){};
         virtual void do_smth_else(){};
     }

9. Logging functionality has been added

10. New packages ``module_builder``, ``decl_wrappers`` and ``_logging_`` has
    been added.

11. ...

http://boost.org/libs/python/doc/v2/init.html#optional-spec

-------------
Version 0.6.0
-------------

1. Code repository has been introduced. This repository contains classes
   and functions that will help users to export different C++ classes and
   declarations. Right now this repository contains two classes:

   * *array_1_t*

   * *const_array_1_t*

   Those classes helps to export static, single dimension arrays.

2. Code generation has been improved.

3. Code generation speed has been improved.

4. If you have Niall Douglas *void\** patch, then you can enjoy from
   automatically set call policies.

5. Bit fields can be accessed from Python

6. Creating custom code creater example has been added.

7. Comparison to Pyste has been wrote.

8. Using this version it is possible to export most of TnFOX Python bindings.

-------------
Version 0.5.1
-------------

1. operator() is now supported.

2. Special casting operators are renamed( *__int__*, *__str__*, ... ).

3. Few bug fixes


.. _`Py++` : ./../pyplusplus.html
.. _`pygccxml` : http://www.language-binding.net/pygccxml/pygccxml.html
.. _`SourceForge`: http://sourceforge.net/index.php

..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   sentence-end-double-space: t
   fill-column: 70
   End:

